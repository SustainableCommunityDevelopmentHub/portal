!function(){return angular.module("app.env.config",[]).constant("config",{env:"local",elastic:{host:"local.portal.dev",port:"9200",apiVersion:"2.0"},app:{root:"app"},django:{host:"http://127.0.0.1",port:"8000"}})}(),function(){"use strict";angular.module("app",["ui.router","ui.bootstrap","app.env.config","app.core","app.widgets","angularUtils.directives.dirPagination","app.home","app.search","app.saved-records","app.advanced-search","app.controller","app.contributors","app.book-detail","AngularPrint","smoothScroll","ngAnimate","angularSpinner"]).config(["$httpProvider",function(e){e.defaults.xsrfCookieName="csrftoken",e.defaults.xsrfHeaderName="X-CSRFToken",e.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded"}]).constant("_",window._).config(["$compileProvider","config",function(e,t){"prod"===t.env?(e.debugInfoEnabled(!1),console.log("In production. Debug mode disabled")):console.log("In "+t.env+". Debug mode enabled")}]).run(["$rootScope","$state","$stateParams",function(e,t,r){e.$state=t,e.$stateParams=r,e.$activeTabs=[],e.showSpinnner=!1}])}(),function(){"use strict";angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider","config",function(e,t,r,a){t.otherwise("/"),e.state("home",{url:"/",templateUrl:a.app.root+"/home/home.html",controller:"HomePageCtrl"}).state("searchResults",{url:"/search?q&from&size&sort&creator&grp_contributor&language&subject&date_gte&date_lte&adv_creator&adv_date&adv_grp_contributor&adv_language&adv_subject&adv_title",controller:"SearchCtrl",templateUrl:a.app.root+"/search/search.results.html",params:{q:{array:!0},creator:{array:!0},grp_contributor:{array:!0},language:{array:!0},subject:{array:!0},adv_creator:{array:!0},adv_grp_contributor:{array:!0},adv_language:{array:!0},adv_subject:{array:!0},adv_date:{array:!0},adv_title:{array:!0}},resolve:{searchResults:["$rootScope","$stateParams","SearchService","DataService","SORT_MODES","ADVANCED_SEARCH",function(e,t,r,a,o,n){e.showSpinner=!0,console.log("Router - SearchResults - in Resolve - $stateParams: "+JSON.stringify(t));var s=r,c=s.getDefaultOptsObj();if(t.size&&(c.size=parseInt(t.size)),t.from&&(c.from=parseInt(t.from)),t.sort&&(c.sort=t.sort.toLowerCase()),t.date_gte&&(c.date.gte=parseInt(t.date_gte)),t.date_lte&&(c.date.lte=parseInt(t.date_lte)),t.q){var i={};c.q=t.q.filter(function(e){return!i[e]&&(i[e]=!0,!0)}),c.q=c.q.map(function(e){return e.toLowerCase()})}return s.facetCategoriesList.forEach(function(e){t[e]&&t[e].length&&t[e].forEach(function(t){var r=s.buildFacet(e,t,0,!0);r&&c.facets.push(r)})}),s.advancedFieldsList.forEach(function(e){var r=n[e],a=t[r.paramName];a&&a.forEach(function(e){var t=s.buildAdvancedField(r,e);t&&c.advancedFields.push(t)})}),console.log("Router - SearchResults - in Resolve - opts: "+JSON.stringify(c)),s.opts=c,a.search(s.opts)}]}}).state("books",{url:"/books/:bookID",templateUrl:a.app.root+"/book_detail/book-detail.html",controller:"BookDetailCtrl",resolve:{book:["$stateParams",function(e){return{_id:e.bookID}}]}}).state("advanced",{url:"/advanced",templateUrl:a.app.root+"/advanced_search/advanced-search.html",controller:"AdvancedSearchCtrl"}).state("contributors",{url:"/contributors",templateUrl:a.app.root+"/contributors/contributors.html",controller:"ContributorsCtrl",resolve:{contributors:["$rootScope","DataService",function(e,t){return e.showSpinner=!1,t.getContributors()}]}}).state("feedback",{url:"/feedback",templateUrl:a.app.root+"/partials/feedback.html",controller:"FeedbackFormCtrl"}).state("thanks",{url:"/thanks",templateUrl:a.app.root+"/partials/thanks.html",controller:"FeedbackFormCtrl"}).state("help",{url:"/help",templateUrl:a.app.root+"/partials/help.html",controller:"SearchHelpCtrl"}).state("faq",{url:"/faq",templateUrl:a.app.root+"/partials/faqs.html",resolve:{spinner:["$rootScope",function(e){e.showSpinner=!1}]}}).state("savedRecords",{url:"/saved",templateUrl:a.app.root+"/saved_records/saved-records.html",controller:"SavedRecordsCtrl",resolve:{records:["$q","SavedRecordsService",function(e,t){return e.when(t.getRecords()).then(function(e){return e})}],searches:["$q","SavedRecordsService",function(e,t){return e.when(t.getSearches()).then(function(e){return e})}]}}),r.html5Mode(!0)}])}(),function(){"use strict";angular.module("app.core",[])}(),function(){"use strict";angular.module("app.core").constant("FACETS",{language:{name:"language",key:"_language",display:"Language",options:[]},subject:{name:"subject",key:"_subject_facets",rawKey:"_subject_facets.raw",display:"Subject",options:[]},creator:{name:"creator",key:"_creator_facet",rawKey:"_creator_facet.raw",display:"Creator/Contributor",options:[]},grp_contributor:{name:"grp_contributor",key:"_grp_contributor",rawKey:"_grp_contributor.raw",display:"From",options:[]}}).constant("SORT_MODES",{relevance:{display:"Relevance",mode:"relevance"},date_added:{display:"Newly Added First",mode:"date_added",sortQuery:{_ingest_date:{order:"desc"}}},title_asc:{display:"Title: A-Z",mode:"title_asc",sortQuery:"_title_display.sort"},title_desc:{display:"Title: Z-A",mode:"title_desc",sortQuery:{"_title_display.sort":{order:"desc"}}},date_asc:{display:"Date (ascending)",mode:"date_asc",sortQuery:"_date_facet"},date_desc:{display:"Date (descending)",mode:"date_desc",sortQuery:{_date_facet:{order:"desc"}}}}).constant("SAVED_ITEMS",{recordKey:"getty_portal_records",searchKey:"getty_portal_searches",gettyID:"getty_portal"}).constant("FROM_DEFAULT",0).constant("SIZE_DEFAULT",25).constant("SORT_DEFAULT","relevance").constant("DEFAULTS",{searchOpts:{q:"",size:25,from:0,facets:[],advancedFields:[],sort:"relevance",date:{}}})}(),function(){"use strict";function e(e,t){function r(e){return e.map(function(e){var t=e._source;return t._id=e._id,t})}function a(e,t,r){return console.log("....activeFacets:::: "+r),e.buckets.map(function(e){var a={category:t,value:e.key,count:e.doc_count,active:!1};return r.length&&r.forEach(function(e){e.category&&e.value&&a.category&&a.value&&e.category===a.category&&e.value===a.value&&(a.active=!0,e.count=a.count)}),a})}var o={parseResults:r,parseAggregationResults:a};return o}angular.module("app.core").factory("SearchResParser",["_","FACETS",e])}(),function(){"use strict";function e(e,t,r,a,o,n,s,c){function i(){return{from:s,size:c,q:[],sort:n,facets:[],advancedFields:[],date:{gte:null,lte:null}}}function l(){var e={};return e.q=this.opts.q,e.from=this.opts.from,e.size=this.opts.size,e.sort=this.opts.sort,e.date_gte=this.opts.date.gte,e.date_lte=this.opts.date.lte,this.facetCategoriesList.forEach(function(t){e[t]=[]}),this.opts.facets.forEach(function(t){e[t.category].push(t.value)}),this.advancedFieldsList.forEach(function(t){e[o[t].paramName]=[]}),this.opts.advancedFields.forEach(function(t){e[t.field.paramName].push(t.term)}),console.log("SearchService::buildQueryParams - queryParams: "+JSON.stringify(e)),e}function u(){var e=this,t={};return this.facetCategoriesList.forEach(function(r){t[r]=[],t[r]=e.opts.facets.filter(function(e){return e.category===r})}),console.log("SearchService::parseFacetsToObj - facets obj: "+JSON.stringify(t)),t}function d(e){return e=e||{},console.log("SearchService::updateOpts -- newOpts: "+JSON.stringify(e)),e.q&&(this.opts.q=e.q),e.sort&&"object"==typeof e.sort&&e.sort.mode&&(e.sort=e.sort.mode),r.merge(this.opts,e),console.log("SearchService::updateOpts -- opts now: "+JSON.stringify(this.opts)),this.opts}function p(e,t){return e&&(this.opts.date.gte=e),t&&(this.opts.date.gte=t),!0}function f(e){this.results.hits=t.parseResults(e.hits.hits),this.results.numTotalHits=e.hits.total;var r=(e.aggregations,this);this.facetCategoriesList.forEach(function(a){r.results.facetOptions[a]=t.parseAggregationResults(e.aggregations[a][a],a,r.opts.facets)});var a={hits:this.results.hits,numTotalHits:this.results.numTotalHits,facets:this.results.facetOptions};return a}function g(){this.opts=this.getDefaultOptsObj()}function h(){var e=1+Math.ceil(this.opts.from/this.opts.size);return e}function v(e,t,r,a){if(!S(e)||!t)return!1;var o={category:e,value:t};return r&&(o.count=r),void 0!==a&&(o.active=a),o}function m(e,t){return!(!e.searchKey&&(e=o[e],!e.searchKey))&&(console.log("SearchService::buildAdvancedField - field, term: "+JSON.stringify(e)+" "+t),{field:e,term:t})}function S(e){return w.indexOf(e)>-1}function y(e){return Boolean(e.category&&S(e.category)&&e.value)}function _(e,t){return e.category.toLowerCase()===t.category.toLowerCase()&&e.value.toLowerCase()===t.value.toLowerCase()}function b(e){var t=!1;return!!y(e)&&(e.active=!0,this.opts.facets.forEach(function(r){_(e,r)&&(r.active=!0,t=!0)}),t||this.opts.facets.push(e),console.log("SearchService::activateFacet -- this.opts.facets[] after new facet: "+JSON.stringify(this.opts.facets)),!0)}function F(e){return!!y(e)&&(e.active=!1,void r.remove(this.opts.facets,function(t){return _(e,t)}))}function R(e){if("all"===e)return this.opts.facets=[],!0;if(!S(e))return!1;for(var t=0;t<this.opts.facets.length;t++)this.opts.facets[t].category===e&&this.opts.facets.splice(t,1);return!0}function C(){e.go("searchResults",this.buildQueryParams(),{reload:!0,inherit:!1})}var w=["creator","grp_contributor","language","subject"],k={results:{hits:null,numTotalHits:null,facetOptions:{}},opts:i(),facetCategoriesList:["creator","grp_contributor","language","subject"],advancedFieldsList:Object.keys(o),updateOpts:d,resetOpts:g,updateDate:p,isValidCategory:S,isValidFacet:y,isSameFacet:_,buildFacet:v,activateFacet:b,deActivateFacet:F,clearFacetsIn:R,buildAdvancedField:m,calculatePage:h,parseFacetsToObj:u,getDefaultOptsObj:i,buildQueryParams:l,transitionStateAndSearch:C,setResultsData:f};return k}angular.module("app.core").factory("SearchService",["$state","SearchResParser","_","FACETS","ADVANCED_SEARCH","SORT_DEFAULT","FROM_DEFAULT","SIZE_DEFAULT",e])}(),function(){"use strict";function e(e,t,r,a){function o(o){var n=["from="+o.from,"size="+o.size,"sort="+o.sort];o.q.length&&o.q.forEach(function(e){n.push("q="+e)}),o.date.gte&&n.push("date_gte="+o.date.gte),o.date.lte&&n.push("date_lte="+o.date.lte),o.facets.forEach(function(e){n.push(e.category+"="+e.value)}),o.advancedFields.forEach(function(e){n.push(e.field.paramName+"="+e.term)});var s=n.join("&"),c=t.get(r.django.host+":"+r.django.port+"/api/books/"+s),i=e.defer();return c.success(function(e){var t=e[0];t.aggregations=e[1].aggregations;var r=a.setResultsData(t);i.resolve(r)}).error(function(e){i.reject(arguments),console.log("DataService::search -- error: "+JSON.stringify(e))}),i.promise}function n(){var a=t.get(r.django.host+":"+r.django.port+"/api/contributors"),o=e.defer();return a.success(function(e){o.resolve(e)}).error(function(){o.reject(arguments)}),o.promise}function s(e){return t.get(r.django.host+":"+r.django.port+"/api/book/raw/"+e)}function c(e){return console.log("getting ris record"),t.get(r.django.host+":"+r.django.port+"/api/book/raw/"+e+".ris")}function i(e){return t.get(r.django.host+":"+r.django.port+"/api/book/"+e)}var l={getContributors:n,getBookData:s,getDcRec:i,getRisRec:c,search:o};return l}angular.module("app.core").factory("DataService",["$q","$http","config","SearchService",e])}(),function(){"use strict";function e(e,t,r,a,o){function n(e,t){return e.q===t.q&&(!(t.facets&&t.facets.length>0&&!o.isEqual(e.facets,t.facets))&&(!(t.advancedFields&&t.advancedFields.length>0&&!o.isEqual(e.advancedFields,t.advancedFields))&&!(t.date&&!o.isEqual(e.date,t.date))))}function s(e,a,o){var s=c(),i=r.searchOpts;if(s&&s.length>0){var l=s[s.length-1].opts;l&&(i=l)}if(!n(i,e)){var u={opts:e,numResults:a,time:o};f(t.searchKey,u)}}function c(){return p(t.searchKey)}function i(e){g(t.searchKey,e)}function l(){return p(t.recordKey)}function u(e){f(t.recordKey,e)}function d(e){g(t.recordKey,e)}function p(e){var t=a.getItems(e);if(t){var r=JSON.parse(t);return r[e]||(r[e]=[]),r[e]}return t}function f(e,r){var o=a.getItems(e);if(o){o=JSON.parse(o),o[e]||(o[e]=[]),o[e].push(r);var n=a.setItem(e,JSON.stringify(o));n||e!==t.recordKey||alert("Error: Could not save record to local storage. Please check your browser settings.")}else e===t.recordKey&&alert("Error: Could not save record to local storage. Please check your browser settings.")}function g(e,r){var o=a.getItems(e);if(o){o=JSON.parse(o);var n=o[e];if(n){var s=n.filter(function(a){return e===t.recordKey?a._id!==r._id:r.time!==a.time});o[e]=s}else o[e]=[];var c=a.setItem(e,JSON.stringify(o));c||e!==t.recordKey||alert("Error: Could not remove item. Please check your browser settings.")}else alert("Error: Could not remove item. Please check your browser settings.")}var h={getRecords:l,saveRecord:u,removeRecord:d,saveSearch:s,getSearches:c,removeSearch:i};return h}angular.module("app.core").factory("SavedRecordsService",["$rootScope","SAVED_ITEMS","DEFAULTS","StorageService","_",e])}(),function(){"use strict";function e(){function e(e){try{var t=localStorage.getItem(e)}catch(r){return!1}if(t)return t;var a={},o=JSON.stringify(a);try{return localStorage.setItem(e,o),o}catch(r){return!1}}function t(e,t){try{return localStorage.setItem(e,t),!0}catch(r){return!1}}var r={getItems:e,setItem:t};return r}angular.module("app.core").factory("StorageService",[e])}(),function(){"use strict";angular.module("app.widgets",["angularUtils.directives.dirPagination"])}(),function(){"use strict";angular.module("app.widgets").config(["config","paginationTemplateProvider",function(e,t){console.log("...widgetConfig: Setting paginationTemplateProvider"),t.setPath(e.app.root+"/bower_components/angularUtils/dirPagination.custom.tpl.html")}])}(),function(){"use strict";function e(){this.scrollTo=function(e){function t(){return self.pageYOffset?self.pageYOffset:document.documentElement&&document.documentElement.scrollTop?document.documentElement.scrollTop:document.body.scrollTop?document.body.scrollTop:0}function r(e){for(var t=document.getElementById(e),r=t.offsetTop,a=t;a.offsetParent&&a.offsetParent!=document.body;)a=a.offsetParent,r+=a.offsetTop;return r}var a=t(),o=r(e),n=o>a?o-a:a-o;if(n<100)return void scrollTo(0,o);var s=Math.round(n/100);s>=20&&(s=20);var c=Math.round(n/25),i=o>a?a+c:a-c,l=0;if(o>a)for(var u=a;u<o;u+=c)setTimeout("window.scrollTo(0, "+i+")",l*s),i+=c,i>o&&(i=o),l++;else for(var u=a;u>o;u-=c)setTimeout("window.scrollTo(0, "+i+")",l*s),i-=c,i<o&&(i=o),l++}}function t(e,t,r){e.gotoElement=function(e){t.hash("bottom"),r.scrollTo(e)}}angular.module("app.widgets",[]).service("anchorSmoothScroll",[e]).controller("ScrollCtrl",["$scope","$location","anchorSmoothScroll",t])}(),function(){"use strict";function e(){var e=function(e,t,r){if("active"==t)return e.css({position:"absolute",top:500,left:0,display:"block"}),jQuery(e).animate({top:0},r),function(t){t&&e.stop()}},t=function(e,t,r){if("active"==t)return e.css({position:"absolute",left:0,top:0}),jQuery(e).animate({top:-500},r),function(t){t&&e.stop()}};return{addClass:e,removeClass:t}}angular.module("app.widgets",["ngAnimate"]).animation(".book",e)}(),function(){"use strict";angular.module("app.widgets",[]).filter("stripspaces",[function(){return function(e){return angular.isString(e)?e.replace(/[\s]/g,""):e}}]).filter("capitalize",[function(){return function(e){if(!angular.isString(e))return e;var t=e.charAt(0).toUpperCase()+e.slice(1);return t}}])}(),function(){"use strict";angular.module("app.home",[])}(),function(){"use strict";function e(e,t,r,a,o){function n(r){t.resetOpts(),t.updateOpts(r),t.transitionStateAndSearch(),e.showSpinner=!0}function s(){t.resetOpts(),t.updateOpts({sort:a.date_added,from:0}),t.transitionStateAndSearch(),e.showSpinner=!0}e.totalTitles=o.numTotalTitles,e.newSearch=n,e.mostRecentSearch=s,e.showSpinner=!1}angular.module("app.home").controller("HomePageCtrl",["$scope","SearchService","$state","SORT_MODES","config",e])}(),function(){"use strict";angular.module("app.search",[])}(),function(){"use strict";function e(e,t,r,a,o,n,s,c,i){function l(t){p.updateOpts(t),console.log("SearchCtrl::updateSearch() -- add'l opts: "+JSON.stringify(t)),console.log("SearchCtrl::updateSearch() -- merged SearchService.opts: "+JSON.stringify(p.opts)),e.showSpinner=!0,p.transitionStateAndSearch()}function u(e,t){var r=Date.now();a.saveSearch(e,t,r)}function d(t){var r=!1;return e.allPageSizeOptions.filter(function(e){return!r&&e>=t?(r=!0,e):e<=t})}var p=r;e.isOpenCreator=!0,e.isOpenSubject=!0,e.isOpenLanguage=!0,e.isOpenFrom=!0,e.hits=o.hits,e.numTotalHits=o.numTotalHits,e.facets=o.facets,e.activeFacets=p.opts.facets,e.advancedFields=p.opts.advancedFields,e.fromDate=p.opts.date.gte,e.toDate=p.opts.date.lte,e.dateRange=p.opts.date,e.queryTerms=p.opts.q,e.newQueryTerm="",e.pagination={page:p.calculatePage(),size:parseInt(p.opts.size),from:parseInt(p.opts.from)},e.categories=c,e.sort=n[p.opts.sort].display,e.showSpinner=!1,console.log("SearchCtrl::$scope.sort: "+JSON.stringify(e.sort)),console.log("SearchCtrl::$scope.pagination: "+JSON.stringify(e.pagination)),console.log("SearchCtrl::$scope.numTotalHits: "+e.numTotalHits),e.savedRecords=a.getRecords(),e.bookMarkText="",u(p.opts,e.numTotalHits),e.allPageSizeOptions=[10,25,50,100],e.validSortModes=n,e.validPageSizeOptions=d(e.numTotalHits),e.newQuerySearch=function(t){t&&(t=t.trim(),e.queryTerms.indexOf(t)===-1&&e.queryTerms.push(t.toLowerCase()));var r={q:e.queryTerms,from:0,sort:n[i]};e.newQueryTerm="",l(r)},e.setPageSize=function(e){console.log("SearchCtrl::setPageSize - current: "+p.opts.size+" , new: "+e),l({size:e,from:0})},e.setSortMode=function(e){console.log("Changing sort to "+e.display),l({sort:e,from:0})},e.setDateRange=function(e,t){console.log("fromDate: "+e+", toDate: "+t),l({date:{gte:e,lte:t},from:0})},e.setPageNum=function(e){if(console.log("SearchCtrl::setPageNum -- calculatePage():"+p.calculatePage()+" , newPage: "+e),p.calculatePage()!==e){var t=p.opts.size*(e-1);console.log("SearchCtrl........updating from from: "+p.opts.from+" to: "+t),l({from:t})}},e.updateFacet=function(t,r){e.showSpinner=!0,r?p.activateFacet(t):p.deActivateFacet(t),p.updateOpts({from:0}),p.transitionStateAndSearch()},e.toggleFacet=function(t){e.updateFacet(t,!t.active)},e.clearAdvancedField=function(t){e.showSpinner=!0;var r=p.opts.advancedFields.indexOf(t);p.opts.advancedFields.splice(r,1),p.updateOpts({advancedFields:p.opts.advancedFields,from:0}),p.transitionStateAndSearch()},e.clearSearchOpts=function(){e.showSpinner=!0,p.resetOpts(),p.transitionStateAndSearch()},e.clearQueryTerm=function(t){e.showSpinner=!0,e.queryTerms=e.queryTerms.filter(function(e){return e!==t}),l({q:e.queryTerms,from:0})},e.clearDateRange=function(){p.opts.date={},l({from:0})}}angular.module("app.search").controller("SearchCtrl",["$scope","$state","SearchService","SavedRecordsService","searchResults","SORT_MODES","DEFAULTS","FACETS","SORT_DEFAULT",e])}(),function(){"use strict";angular.module("app.search").directive("adjustSize",function(){return function(e,t,r){t.bind("keyup",function(){var e=t.val().length;if(e>3){var r=100+5*e;t.css("width",r+"px")}})}}).directive("focusHomeSearch",function(){return function(e,t,r){t[0].querySelector(".search-input").focus()}}).directive("focusSearchOnLoad",function(){return function(e,t,r){t[0].querySelector("#facet-chip-input").focus(),t.addClass("input-div-focus")}}).directive("focusSearchInput",function(){return function(e,t,r){t[0].querySelector("#facet-chip-input").focus(),t.addClass("input-div-focus"),$(document).on("click",function(e){$(e.target).hasClass("facet-search")||$(e.target).is("a")||$(e.target).is("button")||"checkbox"===e.target.type||t.hasClass("input-div-focus")&&t.removeClass("input-div-focus")}),t.bind("click",function(){var e=t[0].querySelector("#facet-chip-input");e.focus(),t.addClass("input-div-focus")})}})}(),function(){"use strict";angular.module("app.saved-records",[])}(),function(){"use strict";function e(e,t,r,a,o,n,s,c){e.savedRecords=r,e.savedSearches=a,e.numRecords=e.savedRecords.length,e.currentSort="",e.currentPage=1,e.recordsActive=!0,e.searchesActive=!1,e.validSortModes=s,e.showSpinner=!1,e.setActiveTab=function(t){"records"===t?(e.recordsActive=!0,e.searchesActive=!1):(e.recordsActive=!1,e.searchesActive=!0)},e.refresh=function(){e.savedRecords=o.getRecords(),e.numRecords=e.savedRecords.length},e.sortRecords=function(t){var r;switch(t.mode){case s.titleAZ.mode:r=function(e,t){return e._title_display<t._title_display?-1:e._title_display>t._title_display?1:0},e.currentSort=s.titleAZ.display;break;case s.titleZA.mode:r=function(e,t){return e._title_display>t._title_display?-1:e._title_display<t._title_display?1:0},e.currentSort=s.titleZA.display;break;case s.dateAdded.mode:r=function(e,t){return e._ingest_date<t._ingest_date?-1:e._ingest_date>t._ingest_date?1:e._title_display<t._title_display?-1:1},e.currentSort=s.dateAdded.display;break;case s.dateAscend.mode:r=function(e,t){return e._date_facet<t._date_facet?-1:e._date_facet>t._date_facet?1:0},e.currentSort=s.dateAscend.display;break;case s.dateDesc.mode:r=function(e,t){return e._date_facet>t._date_facet?-1:e._date_facet<t._date_facet?1:0},e.currentSort=s.dateDesc.display}e.currentPage=1,e.savedRecords=e.savedRecords.sort(r)},e.removeSearch=function(t){var r={opts:t.opts,numResults:t.numResults,time:t.time};o.removeSearch(r),e.savedSearches=o.getSearches()},e.runSearch=function(t){e.showSpinner=!0,n.resetOpts(),n.updateOpts(t.opts),n.transitionStateAndSearch()}}angular.module("app.saved-records").controller("SavedRecordsCtrl",["$scope","$state","records","searches","SavedRecordsService","SearchService","SAVED_RECORDS_SORT","_",e])}(),function(){"use strict";angular.module("app.saved-records").constant("SAVED_RECORDS_SORT",{dateAdded:{display:"Newly Added First",mode:"date_added"},titleAZ:{display:"Title: A-Z",mode:"title_asc"},titleZA:{display:"Title: Z-A",mode:"title_desc"},dateAscend:{display:"Date (ascending)",mode:"date_asc"},dateDesc:{display:"Date (descending)",mode:"date_desc"}})}(),function(){"use strict";angular.module("app.advanced-search",[])}(),function(){"use strict";function e(e,t,r,a){function o(){var t={field:c,term:"",lastFilter:!0};e.filters[e.filters.length-1].lastFilter=!1,e.filters.push(t)}function n(e,t){e.field=t}function s(){e.showSpinner=!0;var t=[],a=[];e.queryTerm&&a.push(e.queryTerm),e.filters.forEach(function(e){e.term&&e.field!==c&&t.push(r.buildAdvancedField(e.field,e.term))});var o={q:a,advancedFields:t};r.resetOpts(),r.updateOpts(o),r.transitionStateAndSearch()}e.filters=[],e.fields=[],e.queryTerm="",e.addFilter=o,e.selectField=n,e.search=s;var c={display:"- Select Field -",searchKey:""};e.$on("$stateChangeSuccess",function(t,r,o,n,s){e.showSpinner=!1,e.filters=[{field:c,term:"",lastFilter:!0}],e.fields=[a.title,a.creator,a.date,a.language,a.subject,a.grp_contributor]})}angular.module("app.advanced-search").controller("AdvancedSearchCtrl",["$scope","$state","SearchService","ADVANCED_SEARCH",e])}(),function(){"use strict";angular.module("app.advanced-search").constant("ADVANCED_SEARCH",{title:{paramName:"adv_title",display:"Title",searchKey:"dublin_core.title"},creator:{paramName:"adv_creator",display:"Creator",searchKey:"dublin_core.creator"},date:{paramName:"adv_date",display:"Date",searchKey:"dublin_core.date"},language:{paramName:"adv_language",display:"Language",searchKey:"dublin_core.language"},subject:{paramName:"adv_subject",display:"Subject",searchKey:"dublin_core.subject"},grp_contributor:{paramName:"adv_grp_contributor",display:"From",searchKey:"_grp_contributor"}})}(),function(){"use strict";angular.module("app.contributors",[])}(),function(){"use strict";function e(e,t,r){var a=t;e.institutions=r,e.contribSearch=function(e){a.resetOpts(),a.activateFacet(a.buildFacet("grp_contributor",e)),a.transitionStateAndSearch()}}angular.module("app.contributors").controller("ContributorsCtrl",["$scope","SearchService","contributors",e])}(),function(){"use strict";angular.module("app.book-detail",[])}(),function(){"use strict";function e(e,t,r,a,o,n){function s(){var t="book.json";e.showSpinner=!0,o.getDcRec(e.book._id).success(function(r){"object"==typeof r&&(r=angular.toJson(r,void 0,2),e.fileContents=r),i(r,"text/json",t)})["finally"](function(){e.showSpinner=!1})}function c(){var t="book.ris";e.showSpinner=!0,o.getRisRec(e.book._id).success(function(r){e.fileContentsRis=r,i(r,"application/x-research-info-systems",t)})["finally"](function(){e.showSpinner=!1})}function i(e,t,r){var a=new Blob([e],{type:t}),o=document.createEvent("MouseEvents"),n=document.createElement("a");n.download=r,n.href=window.URL.createObjectURL(a),n.dataset.downloadurl=[t,n.download,n.href].join(":"),o.initMouseEvent("click",!0,!1,window,0,0,0,0,0,!1,!1,!1,!1,0,null),n.dispatchEvent(o)}e.saveAsJson=s,e.saveAsRis=c,e.showSpinner=!0,e.book=a,o.getBookData(e.book._id).success(function(t){var r=t._source;r._id=t._id,e.book=r})["finally"](function(){e.showSpinner=!1}),e.redirect=function(){return r.location.assign(e.book._source._record_link),!1}}angular.module("app.book-detail").controller("BookDetailCtrl",["$scope","$stateParams","$window","book","DataService",e])}(),function(){"use strict";angular.module("app.controller",["ui.bootstrap"]).controller("SearchHelpCtrl",["config","$scope",function(e,t){t.searchHelp={name:"searchhelp.html",url:e.app.root+"/partials/help.html"},t.showSpinner=!1}]).controller("FeedbackFormCtrl",["config","$scope","$state","$http","$location","$window",function(e,t,r,a,o,n){t.showSpinner=!1,t.feedbackFields=["Problem","Question","Comment"],t.master={first_name:"",last_name:"",email:"",confirmation_email:"",organization:"",type_of_feedback:t.feedbackFields[0],user_feedback:""},t.reset=function(){t.user=angular.copy(t.master),t.isMatch=function(){return t.user.email===t.user.confirmation_email}},t.reset(),t.sendMail=function(){if(t.feedbackForm.$valid&&t.isMatch()){var o=t.user,n={method:"POST",url:e.django.host+":"+e.django.port+"/api/send-email/",headers:{"Content-Type":"application/json"},data:o};a(n).then(function(e){console.log(o),console.log("message successfully sent"),r.go("thanks")},function(e){r.go("thanks")})}else t.feedbackForm.$submitted=!0},t.feedbackErrors=[{msg:"This field is required."},{msg:"Please enter a valid email address."},{msg:"Email addresses do not match."}]}]).controller("FacetModalCtrl",["$scope","$rootScope","config","$uibModal",function(e,t,r,a){e.openFacetModal=function(t,o){var n=a.open({animation:!0,scope:e,templateUrl:r.app.root+"/search/search.facet_modal.html",controller:"FacetModalInstanceCtrl",resolve:{facets:function(){return t},category:function(){return o}}});n.result.then(function(t){if(t){var r=t[0],a=t[1];r.forEach(function(t){e.updateFacet(t,!0)}),a.forEach(function(t){e.updateFacet(t,!1)})}})}}]).controller("FacetModalInstanceCtrl",["$scope","$uibModalInstance","facets","category",function(e,t,r,a){function o(){S=r,e.facetCategories=[{name:"creator",display:"Creator/ Contributor"},{name:"subject",display:"Subject"},{name:"language",display:"Language"},{name:"grp_contributor",display:"From"}],e.currentFacets=r[a],e.categoryFacets=r[a],s()}function n(e){return e.category+e.value}function s(){for(var t in S)for(var r=S[t],a=0;a<r.length;a++){var o=r[a];if(o.active){e.filterCount++,y[t]?y[t]++:y[t]=1;var s=n(o);_[s]={facetObj:o,checked:!0}}e.selectedFacets[o.value]=o.active}}function c(t){e.currentFacets=S[t],e.categoryFacets=this.currentFacets,m=t,e.text="",v=!1,e.filterViewText=h[0]}function i(e){return m===e}function l(t){var r=t.category,a=t.value;e.selectedFacets[a]?(y[r]?y[r]++:y[r]=1,e.filterCount++):(e.filterCount--,y[r]--);var o=n(t);_[o]?_[o].checked=!_[o].checked:_[o]={facetObj:t,checked:!0}}function u(e){return y[e]}function d(){if(v=!v){e.filterViewText=h[1];for(var t=[],r=0;r<e.currentFacets.length;r++){var a=e.currentFacets[r];e.selectedFacets[a.value]&&t.push(a)}e.currentFacets=t}else e.filterViewText=h[0],e.currentFacets=S[m]}function p(){var e=[],r=[];for(var a in _){var o=_[a].facetObj;_[a].checked?e.push(o):r.push(o)}var n=[e,r];t.close(n)}function f(){t.close()}function g(){for(var t=[],r=0;r<e.categoryFacets.length;r++){var a=e.categoryFacets[r];a.value.toLowerCase().indexOf(e.text.toLowerCase())>-1&&t.push(a)}e.currentFacets=t}e.text="",e.filterCount=0,e.currentFacets=[],e.selectedFacets=[],e.facetCategories=[],e.isActive=i,e.switchFacetCategory=c,e.isCategorySelected=u,e.searchFilters=g,e.apply=p,e.checkFacet=l,e.toggleFilterView=d,e.close=f,e.filterViewText="See Only Checked Filters";var h=["See Only Checked Filters","See All Filters"],v=!1,m=a,S=[],y={},_={};o()}])}(),function(){"use strict";angular.module("app").directive("saveRecordButton",["$state","SavedRecordsService","SAVED_ITEMS",function(e,t,r){return{restrict:"AE",replace:"true",scope:!1,templateUrl:"app/partials/save-record-button.html",link:function(r,a,o){function n(e){t.saveRecord(e);var a=t.getRecords();a?r.savedRecords=a:r.savedRecords=[]}function s(a){t.removeRecord(a),r.savedRecords=t.getRecords(),"SavedRecordsCtrl"===e.current.controller&&r.refresh()}r.isRecordSaved=function(e){var r=t.getRecords();if(r){for(var a=0;a<r.length;a++){var o=r[a];if(o._id===e._id)return!0}return!1}return!1},r.saveRecordHover=function(e){this.showBookmarkText=!0,r.isRecordSaved(e)?r.bookMarkText="Remove Record":r.bookMarkText="Save Record"},r.saveRecordHoverOut=function(){this.showBookmarkText=!1},r.toggleSavingBook=function(e){r.isRecordSaved(e)?(s(e),r.bookMarkText="Save Record"):(n(e),r.bookMarkText="Remove Record")}}}}]).directive("storageEventListener",["$state","SavedRecordsService","SAVED_ITEMS",function(e,t,r){return{restrict:"AE",template:"",link:function(t,a,o){angular.element(window).on("storage",function(a){a.key===r.recordKey&&("SavedRecordsCtrl"===e.current.controller&&t.refresh(),t.$apply())})}}}])}();
//# sourceMappingURL=data:application/json;base64,
