!function(){function e(e,t,n){function i(i,g){var l=g.dirPaginate,d=l.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/),p=/\|\s*itemsPerPage\s*:\s*(.*\(\s*\w*\)|([^\)]*?(?=\s+as\s+))|[^\)]*)/;if(null===d[2].match(p))throw"pagination directive: the 'itemsPerPage' filter must be set.";var f=d[2].replace(p,""),h=t(f);s(i);var m=g.paginationId||u;return n.registerInstance(m),function(i,s,g){var d=t(g.paginationId)(i)||g.paginationId||u;n.registerInstance(d);var p=r(l,d);a(s,g,p),o(s);var f=e(s),m=c(i,g,d);n.setCurrentPageParser(d,m,i),"undefined"!=typeof g.totalItems?(n.setAsyncModeTrue(d),i.$watch(function(){return t(g.totalItems)(i)},function(e){0<=e&&n.setCollectionLength(d,e)})):i.$watchCollection(function(){return h(i)},function(e){if(e){var t=e instanceof Array?e.length:Object.keys(e).length;n.setCollectionLength(d,t)}}),f(i)}}function r(e,t){var n,i=!!e.match(/(\|\s*itemsPerPage\s*:[^|]*:[^|]*)/);return n=t===u||i?e:e.replace(/(\|\s*itemsPerPage\s*:\s*[^|\s]*)/,"$1 : '"+t+"'")}function a(e,t,n){e[0].hasAttribute("dir-paginate-start")||e[0].hasAttribute("data-dir-paginate-start")?(t.$set("ngRepeatStart",n),e.eq(e.length-1).attr("ng-repeat-end",!0)):t.$set("ngRepeat",n)}function s(e){angular.forEach(e,function(e){1===e.nodeType&&angular.element(e).attr("dir-paginate-no-compile",!0)})}function o(e){angular.forEach(e,function(e){1===e.nodeType&&angular.element(e).removeAttr("dir-paginate-no-compile")}),e.eq(0).removeAttr("dir-paginate-start").removeAttr("dir-paginate").removeAttr("data-dir-paginate-start").removeAttr("data-dir-paginate"),e.eq(e.length-1).removeAttr("dir-paginate-end").removeAttr("data-dir-paginate-end")}function c(e,n,i){var r;if(n.currentPage)r=t(n.currentPage);else{var a=(i+"__currentPage").replace(/\W/g,"_");e[a]=1,r=t(a)}return r}return{terminal:!0,multiElement:!0,priority:100,compile:i}}function t(){return{priority:5e3,terminal:!0}}function n(e){e.put("angularUtils.directives.dirPagination.template",'<ul class="pagination" ng-if="1 < pages.length || !autoHide"><li ng-if="boundaryLinks" ng-class="{ disabled : pagination.current == 1 }"><a href="" ng-click="setCurrent(1)">&laquo;</a></li><li ng-if="directionLinks" ng-class="{ disabled : pagination.current == 1 }"><a href="" ng-click="setCurrent(pagination.current - 1)">&lsaquo;</a></li><li ng-repeat="pageNumber in pages track by tracker(pageNumber, $index)" ng-class="{ active : pagination.current == pageNumber, disabled : pageNumber == \'...\' || ( ! autoHide && pages.length === 1 ) }"><a href="" ng-click="setCurrent(pageNumber)">{{ pageNumber }}</a></li><li ng-if="directionLinks" ng-class="{ disabled : pagination.current == pagination.last }"><a href="" ng-click="setCurrent(pagination.current + 1)">&rsaquo;</a></li><li ng-if="boundaryLinks"  ng-class="{ disabled : pagination.current == pagination.last }"><a href="" ng-click="setCurrent(pagination.last)">&raquo;</a></li></ul>')}function i(e,t){function n(t,n,r){function s(n){e.isRegistered(d)&&g(n)&&(t.pages=i(n,e.getCollectionLength(d),e.getItemsPerPage(d),f),t.pagination.current=n,c(),t.onPageChange&&t.onPageChange({newPageNumber:n}))}function o(){if(e.isRegistered(d)){var n=parseInt(e.getCurrentPage(d))||1;t.pages=i(n,e.getCollectionLength(d),e.getItemsPerPage(d),f),t.pagination.current=n,t.pagination.last=t.pages[t.pages.length-1],t.pagination.last<t.pagination.current?t.setCurrent(t.pagination.last):c()}}function c(){if(e.isRegistered(d)){var n=e.getCurrentPage(d),i=e.getItemsPerPage(d),r=e.getCollectionLength(d);t.range.lower=(n-1)*i+1,t.range.upper=Math.min(n*i,r),t.range.total=r}}function g(e){return a.test(e)&&0<e&&e<=t.pagination.last}var l=r.paginationId||u,d=t.paginationId||r.paginationId||u;if(!e.isRegistered(d)&&!e.isRegistered(l)){var p=d!==u?" (id: "+d+") ":" ";console.warn("Pagination directive: the pagination controls"+p+"cannot be used without the corresponding pagination directive, which was not found at link time.")}t.maxSize||(t.maxSize=9),t.autoHide=void 0===t.autoHide||t.autoHide,t.directionLinks=!angular.isDefined(r.directionLinks)||t.$parent.$eval(r.directionLinks),t.boundaryLinks=!!angular.isDefined(r.boundaryLinks)&&t.$parent.$eval(r.boundaryLinks);var f=Math.max(t.maxSize,5);t.pages=[],t.pagination={last:1,current:1},t.range={lower:1,upper:1,total:1},t.$watch(function(){if(e.isRegistered(d))return(e.getCollectionLength(d)+1)*e.getItemsPerPage(d)},function(e){0<e&&o()}),t.$watch(function(){if(e.isRegistered(d))return e.getItemsPerPage(d)},function(e,n){e!=n&&"undefined"!=typeof n&&s(t.pagination.current)}),t.$watch(function(){if(e.isRegistered(d))return e.getCurrentPage(d)},function(e,t){e!=t&&s(e)}),t.setCurrent=function(t){e.isRegistered(d)&&g(t)&&(t=parseInt(t,10),e.setCurrentPage(d,t))},t.tracker=function(e,t){return e+"_"+t}}function i(e,t,n,i){var a,s=[],o=Math.ceil(t/n),c=Math.ceil(i/2);a=e<=c?"start":o-c<e?"end":"middle";for(var u=i<o,g=1;g<=o&&g<=i;){var l=r(g,e,i,o),d=2===g&&("middle"===a||"end"===a),p=g===i-1&&("middle"===a||"start"===a);u&&(d||p)?s.push("..."):s.push(l),g++}return s}function r(e,t,n,i){var r=Math.ceil(n/2);return e===n?i:1===e?e:n<i?i-r<t?i-n+e:r<t?t-r+e:e:e}var a=/^\d+$/;return{restrict:"AE",templateUrl:function(e,n){return n.templateUrl||t.getPath()},scope:{maxSize:"=?",onPageChange:"&?",paginationId:"=?",autoHide:"=?"},link:n}}function r(e){return function(t,n,i){if("undefined"==typeof i&&(i=u),!e.isRegistered(i))throw"pagination directive: the itemsPerPage id argument (id: "+i+") does not match a registered pagination-id.";var r,s;if(angular.isObject(t)){if(n=parseInt(n)||9999999999,s=e.isAsyncMode(i)?0:(e.getCurrentPage(i)-1)*n,r=s+n,e.setItemsPerPage(i,n),t instanceof Array)return t.slice(s,r);var o={};return angular.forEach(a(t).slice(s,r),function(e){o[e]=t[e]}),o}return t}}function a(e){if(Object.keys)return Object.keys(e);var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(n);return t}function s(){var e,t={};this.registerInstance=function(n){"undefined"==typeof t[n]&&(t[n]={asyncMode:!1},e=n)},this.isRegistered=function(e){return"undefined"!=typeof t[e]},this.getLastInstanceId=function(){return e},this.setCurrentPageParser=function(e,n,i){t[e].currentPageParser=n,t[e].context=i},this.setCurrentPage=function(e,n){t[e].currentPageParser.assign(t[e].context,n)},this.getCurrentPage=function(e){var n=t[e].currentPageParser;return n?n(t[e].context):1},this.setItemsPerPage=function(e,n){t[e].itemsPerPage=n},this.getItemsPerPage=function(e){return t[e].itemsPerPage},this.setCollectionLength=function(e,n){t[e].collectionLength=n},this.getCollectionLength=function(e){return t[e].collectionLength},this.setAsyncModeTrue=function(e){t[e].asyncMode=!0},this.isAsyncMode=function(e){return t[e].asyncMode}}function o(){var e="angularUtils.directives.dirPagination.template";this.setPath=function(t){e=t},this.$get=function(){return{getPath:function(){return e}}}}var c="angularUtils.directives.dirPagination",u="__default";angular.module(c,[]).directive("dirPaginate",["$compile","$parse","paginationService",e]).directive("dirPaginateNoCompile",t).directive("dirPaginationControls",["paginationService","paginationTemplate",i]).filter("itemsPerPage",["paginationService",r]).service("paginationService",s).provider("paginationTemplate",o).run(["$templateCache",n])}(),function(){function e(e){if("function"==typeof e)e=!0;else if(e&&0!==e.length){var n=t(""+e);e=!("f"==n||"0"==n||"false"==n||"no"==n||"n"==n||"[]"==n)}else e=!1;return e}var t=function(e){return"string"==typeof e?e.toLowerCase():e},n=angular.module("AngularPrint",[]);n.directive("printSection",function(){return{restrict:"A",link:function(e,t){t[0].classList.add("printSection")}}}),n.directive("printHide",function(){return{restrict:"A",link:function(e,t){t[0].classList.add("printHide")}}}),n.directive("printRemove",function(){return{restrict:"A",link:function(e,t){t[0].classList.add("printRemove")}}}),n.directive("printOnly",function(){return{restrict:"A",link:{post:function(e,t){t[0].classList.add("printOnly")}}}}),n.directive("printAvoidBreak",function(){return{restrict:"A",link:function(e,t){t[0].classList.add("avoidPageBreak")}}}),n.directive("printBtn",["$window",function(e){return{restrict:"A",link:function(t,n){n.on("click",function(){e.print()})}}}]),n.directive("printIf",["$animate",function(t){return function(n,i,r){n.$watch(r.printIf,function(n){"printOnly"in r?t[e(n)?"removeClass":"addClass"](i,"printRemove"):t[e(n)?"addClass":"removeClass"](i,"printSection")})}}]),n.directive("printLandscape",function(){return{restrict:"A",link:function(){var e=function(){var e=document.createElement("style");return e.appendChild(document.createTextNode("")),document.head.appendChild(e),e.sheet}();e.insertRule("@page{size:landscape;}",0)}}}),n.directive("printTable",function(){return function(e,t,n){e.$watch(n.printTable,function(e){setTimeout(function(){if(null!=e){var n=t[0];n.classList.add("printSection"),n.id="print-table";for(var i,r,a=n.getElementsByTagName("td"),s=0;s<a.length;s++)i=a[s].innerHTML,a[s].innerHTML="",r=document.createElement("div"),r.className="avoidPageBreak",r.innerHTML=i,a[s].appendChild(r);t[0]=n}},1e3)})}})}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpclBhZ2luYXRpb24uanMiLCJhbmd1bGFyUHJpbnQuanMiXSwibmFtZXMiOlsiZGlyUGFnaW5hdGVEaXJlY3RpdmUiLCIkY29tcGlsZSIsIiRwYXJzZSIsInBhZ2luYXRpb25TZXJ2aWNlIiwiZGlyUGFnaW5hdGlvbkNvbXBpbGVGbiIsInRFbGVtZW50IiwidEF0dHJzIiwiZXhwcmVzc2lvbiIsImRpclBhZ2luYXRlIiwibWF0Y2giLCJmaWx0ZXJQYXR0ZXJuIiwiaXRlbXNQZXJQYWdlRmlsdGVyUmVtb3ZlZCIsInJlcGxhY2UiLCJjb2xsZWN0aW9uR2V0dGVyIiwiYWRkTm9Db21waWxlQXR0cmlidXRlcyIsInJhd0lkIiwicGFnaW5hdGlvbklkIiwiREVGQVVMVF9JRCIsInJlZ2lzdGVySW5zdGFuY2UiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRycyIsInJlcGVhdEV4cHJlc3Npb24iLCJnZXRSZXBlYXRFeHByZXNzaW9uIiwiYWRkTmdSZXBlYXRUb0VsZW1lbnQiLCJyZW1vdmVUZW1wb3JhcnlBdHRyaWJ1dGVzIiwiY29tcGlsZWQiLCJjdXJyZW50UGFnZUdldHRlciIsIm1ha2VDdXJyZW50UGFnZUdldHRlckZuIiwic2V0Q3VycmVudFBhZ2VQYXJzZXIiLCJ0b3RhbEl0ZW1zIiwic2V0QXN5bmNNb2RlVHJ1ZSIsIiR3YXRjaCIsInJlc3VsdCIsInNldENvbGxlY3Rpb25MZW5ndGgiLCIkd2F0Y2hDb2xsZWN0aW9uIiwiY29sbGVjdGlvbiIsImNvbGxlY3Rpb25MZW5ndGgiLCJBcnJheSIsImxlbmd0aCIsIk9iamVjdCIsImtleXMiLCJpZERlZmluZWRJbkZpbHRlciIsImhhc0F0dHJpYnV0ZSIsIiRzZXQiLCJlcSIsImF0dHIiLCJhbmd1bGFyIiwiZm9yRWFjaCIsImVsIiwibm9kZVR5cGUiLCJyZW1vdmVBdHRyIiwiY3VycmVudFBhZ2UiLCJkZWZhdWx0Q3VycmVudFBhZ2UiLCJ0ZXJtaW5hbCIsIm11bHRpRWxlbWVudCIsInByaW9yaXR5IiwiY29tcGlsZSIsIm5vQ29tcGlsZURpcmVjdGl2ZSIsImRpclBhZ2luYXRpb25Db250cm9sc1RlbXBsYXRlSW5zdGFsbGVyIiwiJHRlbXBsYXRlQ2FjaGUiLCJwdXQiLCJkaXJQYWdpbmF0aW9uQ29udHJvbHNEaXJlY3RpdmUiLCJwYWdpbmF0aW9uVGVtcGxhdGUiLCJkaXJQYWdpbmF0aW9uQ29udHJvbHNMaW5rRm4iLCJnb1RvUGFnZSIsIm51bSIsImlzUmVnaXN0ZXJlZCIsImlzVmFsaWRQYWdlTnVtYmVyIiwicGFnZXMiLCJnZW5lcmF0ZVBhZ2VzQXJyYXkiLCJnZXRDb2xsZWN0aW9uTGVuZ3RoIiwiZ2V0SXRlbXNQZXJQYWdlIiwicGFnaW5hdGlvblJhbmdlIiwicGFnaW5hdGlvbiIsImN1cnJlbnQiLCJ1cGRhdGVSYW5nZVZhbHVlcyIsIm9uUGFnZUNoYW5nZSIsIm5ld1BhZ2VOdW1iZXIiLCJnZW5lcmF0ZVBhZ2luYXRpb24iLCJwYWdlIiwicGFyc2VJbnQiLCJnZXRDdXJyZW50UGFnZSIsImxhc3QiLCJzZXRDdXJyZW50IiwiaXRlbXNQZXJQYWdlIiwicmFuZ2UiLCJsb3dlciIsInVwcGVyIiwiTWF0aCIsIm1pbiIsInRvdGFsIiwibnVtYmVyUmVnZXgiLCJ0ZXN0IiwiaWRNZXNzYWdlIiwiY29uc29sZSIsIndhcm4iLCJtYXhTaXplIiwiYXV0b0hpZGUiLCJ1bmRlZmluZWQiLCJkaXJlY3Rpb25MaW5rcyIsImlzRGVmaW5lZCIsIiRwYXJlbnQiLCIkZXZhbCIsImJvdW5kYXJ5TGlua3MiLCJtYXgiLCJwcmV2aW91cyIsInByZXZpb3VzUGFnZSIsInNldEN1cnJlbnRQYWdlIiwidHJhY2tlciIsImlkIiwiaW5kZXgiLCJyb3dzUGVyUGFnZSIsInBvc2l0aW9uIiwidG90YWxQYWdlcyIsImNlaWwiLCJoYWxmV2F5IiwiZWxsaXBzZXNOZWVkZWQiLCJpIiwicGFnZU51bWJlciIsImNhbGN1bGF0ZVBhZ2VOdW1iZXIiLCJvcGVuaW5nRWxsaXBzZXNOZWVkZWQiLCJjbG9zaW5nRWxsaXBzZXNOZWVkZWQiLCJwdXNoIiwicmVzdHJpY3QiLCJ0ZW1wbGF0ZVVybCIsImVsZW0iLCJnZXRQYXRoIiwibGluayIsIml0ZW1zUGVyUGFnZUZpbHRlciIsImVuZCIsInN0YXJ0IiwiaXNPYmplY3QiLCJpc0FzeW5jTW9kZSIsInNldEl0ZW1zUGVyUGFnZSIsInNsaWNlIiwic2xpY2VkT2JqZWN0Iiwia2V5Iiwib2JqIiwib2JqS2V5cyIsImhhc093blByb3BlcnR5IiwibGFzdFJlZ2lzdGVyZWRJbnN0YW5jZSIsImluc3RhbmNlcyIsInRoaXMiLCJpbnN0YW5jZUlkIiwiYXN5bmNNb2RlIiwiZ2V0TGFzdEluc3RhbmNlSWQiLCJ2YWwiLCJjdXJyZW50UGFnZVBhcnNlciIsImNvbnRleHQiLCJhc3NpZ24iLCJwYXJzZXIiLCJwYWdpbmF0aW9uVGVtcGxhdGVQcm92aWRlciIsInRlbXBsYXRlUGF0aCIsInNldFBhdGgiLCJwYXRoIiwiJGdldCIsIm1vZHVsZU5hbWUiLCJtb2R1bGUiLCJkaXJlY3RpdmUiLCJmaWx0ZXIiLCJzZXJ2aWNlIiwicHJvdmlkZXIiLCJydW4iLCJ0b0Jvb2xlYW4iLCJ2YWx1ZSIsInYiLCJsb3dlcmNhc2UiLCJzdHJpbmciLCJ0b0xvd2VyQ2FzZSIsIkFuZ3VsYXJQcmludCIsImNsYXNzTGlzdCIsImFkZCIsInBvc3QiLCIkd2luZG93Iiwib24iLCJwcmludCIsIiRhbmltYXRlIiwicHJpbnRJZiIsInNoZWV0Iiwic3R5bGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiaGVhZCIsImluc2VydFJ1bGUiLCJwcmludFRhYmxlIiwic2V0VGltZW91dCIsImNvbnRlbnQiLCJkaXYiLCJ0ZHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImlubmVySFRNTCIsImNsYXNzTmFtZSJdLCJtYXBwaW5ncyI6IkNBZ0JBLFdBb0JBLFFBQUFBLEdBQUFDLEVBQUFDLEVBQUFDLEdBU0EsUUFBQUMsR0FBQUMsRUFBQUMsR0FFQSxHQUFBQyxHQUFBRCxF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V0FBQSxTQUFBa0IsR0FDQSxNQUFBLFVBQUE5SixFQUFBQyxFQUFBMEIsR0FDQTNCLEVBQUFhLE9BQUFjLEVBQUFvSSxRQUFBLFNBQUFiLEdBQ0EsYUFBQXZILEdBQ0FtSSxFQUFBYixFQUFBQyxHQUFBLGNBQUEsWUFBQWpKLEVBQUEsZUFHQTZKLEVBQUFiLEVBQUFDLEdBQUEsV0FBQSxlQUFBakosRUFBQSxzQkFLQXNKLEVBQUFYLFVBQUEsaUJBQUEsV0FDQSxPQUNBbkMsU0FBQSxJQUNBSSxLQUFBLFdBQ0EsR0FBQW1ELEdBQUEsV0FDQSxHQUFBQyxHQUFBQyxTQUFBQyxjQUFBLFFBR0EsT0FGQUYsR0FBQUcsWUFBQUYsU0FBQUcsZUFBQSxLQUNBSCxTQUFBSSxLQUFBRixZQUFBSCxHQUNBQSxFQUFBRCxRQUVBQSxHQUFBTyxXQUFBLHlCQUFBLE9BSUFoQixFQUFBWCxVQUFBLGFBQUEsV0FDQSxNQUFBLFVBQUE1SSxFQUFBQyxFQUFBMEIsR0FDQTNCLEVBQUFhLE9BQUFjLEVBQUE2SSxXQUFBLFNBQUF0QixHQUNBdUIsV0FBQSxXQUNBLEdBQUEsTUFBQXZCLEVBQUEsQ0FDQSxHQUFBdkMsR0FBQTFHLEVBQUEsRUFDQTBHLEdBQUE2QyxVQUFBQyxJQUFBLGdCQUNBOUMsRUFBQWhCLEdBQUEsYUFFQSxLQUFBLEdBQUErRSxHQUFBQyxFQURBQyxFQUFBakUsRUFBQWtFLHFCQUFBLE1BQ0ExRSxFQUFBLEVBQUFBLEVBQUF5RSxFQUFBeEosT0FBQStFLElBQ0F1RSxFQUFBRSxFQUFBekUsR0FBQTJFLFVBQ0FGLEVBQUF6RSxHQUFBMkUsVUFBQSxHQUNBSCxFQUFBVCxTQUFBQyxjQUFBLE9BQ0FRLEVBQUFJLFVBQUEsaUJBQ0FKLEVBQUFHLFVBQUFKLEVBQ0FFLEVBQUF6RSxHQUFBaUUsWUFBQU8sRUFFQTFLLEdBQUEsR0FBQTBHLElBQ0EiLCJmaWxlIjoibW9yZV92ZW5kb3JzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogZGlyUGFnaW5hdGlvbiAtIEFuZ3VsYXJKUyBtb2R1bGUgZm9yIHBhZ2luYXRpbmcgKGFsbW9zdCkgYW55dGhpbmcuXG4gKlxuICpcbiAqIENyZWRpdHNcbiAqID09PT09PT1cbiAqXG4gKiBEYW5pZWwgVGFidWVuY2E6IGh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vZC9tc2cvYW5ndWxhci9hbjlRcHpxSVlpTS9yOHYtM1cxWDV2Y0pcbiAqIGZvciB0aGUgaWRlYSBvbiBob3cgdG8gZHluYW1pY2FsbHkgaW52b2tlIHRoZSBuZy1yZXBlYXQgZGlyZWN0aXZlLlxuICpcbiAqIEkgYm9ycm93ZWQgYSBjb3VwbGUgb2YgbGluZXMgYW5kIGEgZmV3IGF0dHJpYnV0ZSBuYW1lcyBmcm9tIHRoZSBBbmd1bGFyVUkgQm9vdHN0cmFwIHByb2plY3Q6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci11aS9ib290c3RyYXAvYmxvYi9tYXN0ZXIvc3JjL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAyMDE0IE1pY2hhZWwgQnJvbWxleSA8bWljaGFlbEBtaWNoYWVsYnJvbWxleS5jby51az5cbiAqL1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDb25maWdcbiAgICAgKi9cbiAgICB2YXIgbW9kdWxlTmFtZSA9ICdhbmd1bGFyVXRpbHMuZGlyZWN0aXZlcy5kaXJQYWdpbmF0aW9uJztcbiAgICB2YXIgREVGQVVMVF9JRCA9ICdfX2RlZmF1bHQnO1xuXG4gICAgLyoqXG4gICAgICogTW9kdWxlXG4gICAgICovXG4gICAgYW5ndWxhci5tb2R1bGUobW9kdWxlTmFtZSwgW10pXG4gICAgICAgIC5kaXJlY3RpdmUoJ2RpclBhZ2luYXRlJywgWyckY29tcGlsZScsICckcGFyc2UnLCAncGFnaW5hdGlvblNlcnZpY2UnLCBkaXJQYWdpbmF0ZURpcmVjdGl2ZV0pXG4gICAgICAgIC5kaXJlY3RpdmUoJ2RpclBhZ2luYXRlTm9Db21waWxlJywgbm9Db21waWxlRGlyZWN0aXZlKVxuICAgICAgICAuZGlyZWN0aXZlKCdkaXJQYWdpbmF0aW9uQ29udHJvbHMnLCBbJ3BhZ2luYXRpb25TZXJ2aWNlJywgJ3BhZ2luYXRpb25UZW1wbGF0ZScsIGRpclBhZ2luYXRpb25Db250cm9sc0RpcmVjdGl2ZV0pXG4gICAgICAgIC5maWx0ZXIoJ2l0ZW1zUGVyUGFnZScsIFsncGFnaW5hdGlvblNlcnZpY2UnLCBpdGVtc1BlclBhZ2VGaWx0ZXJdKVxuICAgICAgICAuc2VydmljZSgncGFnaW5hdGlvblNlcnZpY2UnLCBwYWdpbmF0aW9uU2VydmljZSlcbiAgICAgICAgLnByb3ZpZGVyKCdwYWdpbmF0aW9uVGVtcGxhdGUnLCBwYWdpbmF0aW9uVGVtcGxhdGVQcm92aWRlcilcbiAgICAgICAgLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJyxkaXJQYWdpbmF0aW9uQ29udHJvbHNUZW1wbGF0ZUluc3RhbGxlcl0pO1xuXG4gICAgZnVuY3Rpb24gZGlyUGFnaW5hdGVEaXJlY3RpdmUoJGNvbXBpbGUsICRwYXJzZSwgcGFnaW5hdGlvblNlcnZpY2UpIHtcblxuICAgICAgICByZXR1cm4gIHtcbiAgICAgICAgICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgICAgICAgICAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICAgICAgICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgICAgICAgIGNvbXBpbGU6IGRpclBhZ2luYXRpb25Db21waWxlRm5cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBkaXJQYWdpbmF0aW9uQ29tcGlsZUZuKHRFbGVtZW50LCB0QXR0cnMpe1xuXG4gICAgICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IHRBdHRycy5kaXJQYWdpbmF0ZTtcbiAgICAgICAgICAgIC8vIHJlZ2V4IHRha2VuIGRpcmVjdGx5IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9ibG9iL3YxLjQueC9zcmMvbmcvZGlyZWN0aXZlL25nUmVwZWF0LmpzI0wzMzlcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goL15cXHMqKFtcXHNcXFNdKz8pXFxzK2luXFxzKyhbXFxzXFxTXSs/KSg/Olxccythc1xccysoW1xcc1xcU10rPykpPyg/Olxccyt0cmFja1xccytieVxccysoW1xcc1xcU10rPykpP1xccyokLyk7XG5cbiAgICAgICAgICAgIHZhciBmaWx0ZXJQYXR0ZXJuID0gL1xcfFxccyppdGVtc1BlclBhZ2VcXHMqOlxccyooLipcXChcXHMqXFx3KlxcKXwoW15cXCldKj8oPz1cXHMrYXNcXHMrKSl8W15cXCldKikvO1xuICAgICAgICAgICAgaWYgKG1hdGNoWzJdLm1hdGNoKGZpbHRlclBhdHRlcm4pID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ3BhZ2luYXRpb24gZGlyZWN0aXZlOiB0aGUgXFwnaXRlbXNQZXJQYWdlXFwnIGZpbHRlciBtdXN0IGJlIHNldC4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGl0ZW1zUGVyUGFnZUZpbHRlclJlbW92ZWQgPSBtYXRjaFsyXS5yZXBsYWNlKGZpbHRlclBhdHRlcm4sICcnKTtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uR2V0dGVyID0gJHBhcnNlKGl0ZW1zUGVyUGFnZUZpbHRlclJlbW92ZWQpO1xuXG4gICAgICAgICAgICBhZGROb0NvbXBpbGVBdHRyaWJ1dGVzKHRFbGVtZW50KTtcblxuICAgICAgICAgICAgLy8gSWYgYW55IHZhbHVlIGlzIHNwZWNpZmllZCBmb3IgcGFnaW5hdGlvbklkLCB3ZSByZWdpc3RlciB0aGUgdW4tZXZhbHVhdGVkIGV4cHJlc3Npb24gYXQgdGhpcyBzdGFnZSBmb3IgdGhlIGJlbmVmaXQgb2YgYW55XG4gICAgICAgICAgICAvLyBkaXItcGFnaW5hdGlvbi1jb250cm9scyBkaXJlY3RpdmVzIHRoYXQgbWF5IGJlIGxvb2tpbmcgZm9yIHRoaXMgSUQuXG4gICAgICAgICAgICB2YXIgcmF3SWQgPSB0QXR0cnMucGFnaW5hdGlvbklkIHx8IERFRkFVTFRfSUQ7XG4gICAgICAgICAgICBwYWdpbmF0aW9uU2VydmljZS5yZWdpc3Rlckluc3RhbmNlKHJhd0lkKTtcblxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRpclBhZ2luYXRpb25MaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKXtcblxuICAgICAgICAgICAgICAgIC8vIE5vdyB0aGF0IHdlIGhhdmUgYWNjZXNzIHRvIHRoZSBgc2NvcGVgIHdlIGNhbiBpbnRlcnBvbGF0ZSBhbnkgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGUgcGFnaW5hdGlvbklkIGF0dHJpYnV0ZSBhbmRcbiAgICAgICAgICAgICAgICAvLyBwb3RlbnRpYWxseSByZWdpc3RlciBhIG5ldyBJRCBpZiBpdCBldmFsdWF0ZXMgdG8gYSBkaWZmZXJlbnQgdmFsdWUgdGhhbiB0aGUgcmF3SWQuXG4gICAgICAgICAgICAgICAgdmFyIHBhZ2luYXRpb25JZCA9ICRwYXJzZShhdHRycy5wYWdpbmF0aW9uSWQpKHNjb3BlKSB8fCBhdHRycy5wYWdpbmF0aW9uSWQgfHwgREVGQVVMVF9JRDtcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uU2VydmljZS5yZWdpc3Rlckluc3RhbmNlKHBhZ2luYXRpb25JZCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVwZWF0RXhwcmVzc2lvbiA9IGdldFJlcGVhdEV4cHJlc3Npb24oZXhwcmVzc2lvbiwgcGFnaW5hdGlvbklkKTtcbiAgICAgICAgICAgICAgICBhZGROZ1JlcGVhdFRvRWxlbWVudChlbGVtZW50LCBhdHRycywgcmVwZWF0RXhwcmVzc2lvbik7XG5cbiAgICAgICAgICAgICAgICByZW1vdmVUZW1wb3JhcnlBdHRyaWJ1dGVzKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHZhciBjb21waWxlZCA9ICAkY29tcGlsZShlbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UGFnZUdldHRlciA9IG1ha2VDdXJyZW50UGFnZUdldHRlckZuKHNjb3BlLCBhdHRycywgcGFnaW5hdGlvbklkKTtcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uU2VydmljZS5zZXRDdXJyZW50UGFnZVBhcnNlcihwYWdpbmF0aW9uSWQsIGN1cnJlbnRQYWdlR2V0dGVyLCBzY29wZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGF0dHJzLnRvdGFsSXRlbXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25TZXJ2aWNlLnNldEFzeW5jTW9kZVRydWUocGFnaW5hdGlvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRwYXJzZShhdHRycy50b3RhbEl0ZW1zKShzY29wZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwIDw9IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25TZXJ2aWNlLnNldENvbGxlY3Rpb25MZW5ndGgocGFnaW5hdGlvbklkLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25HZXR0ZXIoc2NvcGUpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uTGVuZ3RoID0gKGNvbGxlY3Rpb24gaW5zdGFuY2VvZiBBcnJheSkgPyBjb2xsZWN0aW9uLmxlbmd0aCA6IE9iamVjdC5rZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uU2VydmljZS5zZXRDb2xsZWN0aW9uTGVuZ3RoKHBhZ2luYXRpb25JZCwgY29sbGVjdGlvbkxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIERlbGVnYXRlIHRvIHRoZSBsaW5rIGZ1bmN0aW9uIHJldHVybmVkIGJ5IHRoZSBuZXcgY29tcGlsYXRpb24gb2YgdGhlIG5nLXJlcGVhdFxuICAgICAgICAgICAgICAgIGNvbXBpbGVkKHNjb3BlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgYSBwYWdpbmF0aW9uIGlkIGhhcyBiZWVuIHNwZWNpZmllZCwgd2UgbmVlZCB0byBjaGVjayB0aGF0IGl0IGlzIHByZXNlbnQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCBwYXNzZWQgdG9cbiAgICAgICAgICogdGhlIGl0ZW1zUGVyUGFnZSBmaWx0ZXIuIElmIGl0IGlzIG5vdCB0aGVyZSwgd2UgYWRkIGl0IGFuZCByZXR1cm4gdGhlIG1vZGlmaWVkIGV4cHJlc3Npb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBleHByZXNzaW9uXG4gICAgICAgICAqIEBwYXJhbSBwYWdpbmF0aW9uSWRcbiAgICAgICAgICogQHJldHVybnMgeyp9XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBnZXRSZXBlYXRFeHByZXNzaW9uKGV4cHJlc3Npb24sIHBhZ2luYXRpb25JZCkge1xuICAgICAgICAgICAgdmFyIHJlcGVhdEV4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgaWREZWZpbmVkSW5GaWx0ZXIgPSAhIWV4cHJlc3Npb24ubWF0Y2goLyhcXHxcXHMqaXRlbXNQZXJQYWdlXFxzKjpbXnxdKjpbXnxdKikvKTtcblxuICAgICAgICAgICAgaWYgKHBhZ2luYXRpb25JZCAhPT0gREVGQVVMVF9JRCAmJiAhaWREZWZpbmVkSW5GaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXBlYXRFeHByZXNzaW9uID0gZXhwcmVzc2lvbi5yZXBsYWNlKC8oXFx8XFxzKml0ZW1zUGVyUGFnZVxccyo6XFxzKltefFxcc10qKS8sIFwiJDEgOiAnXCIgKyBwYWdpbmF0aW9uSWQgKyBcIidcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcGVhdEV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVwZWF0RXhwcmVzc2lvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIHRoZSBuZy1yZXBlYXQgZGlyZWN0aXZlIHRvIHRoZSBlbGVtZW50LiBJbiB0aGUgY2FzZSBvZiBtdWx0aS1lbGVtZW50ICgtc3RhcnQsIC1lbmQpIGl0IGFkZHMgdGhlXG4gICAgICAgICAqIGFwcHJvcHJpYXRlIG11bHRpLWVsZW1lbnQgbmctcmVwZWF0IHRvIHRoZSBmaXJzdCBhbmQgbGFzdCBlbGVtZW50IGluIHRoZSByYW5nZS5cbiAgICAgICAgICogQHBhcmFtIGVsZW1lbnRcbiAgICAgICAgICogQHBhcmFtIGF0dHJzXG4gICAgICAgICAqIEBwYXJhbSByZXBlYXRFeHByZXNzaW9uXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBhZGROZ1JlcGVhdFRvRWxlbWVudChlbGVtZW50LCBhdHRycywgcmVwZWF0RXhwcmVzc2lvbikge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRbMF0uaGFzQXR0cmlidXRlKCdkaXItcGFnaW5hdGUtc3RhcnQnKSB8fCBlbGVtZW50WzBdLmhhc0F0dHJpYnV0ZSgnZGF0YS1kaXItcGFnaW5hdGUtc3RhcnQnKSkge1xuICAgICAgICAgICAgICAgIC8vIHVzaW5nIG11bHRpRWxlbWVudCBtb2RlIChkaXItcGFnaW5hdGUtc3RhcnQsIGRpci1wYWdpbmF0ZS1lbmQpXG4gICAgICAgICAgICAgICAgYXR0cnMuJHNldCgnbmdSZXBlYXRTdGFydCcsIHJlcGVhdEV4cHJlc3Npb24pO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZXEoZWxlbWVudC5sZW5ndGggLSAxKS5hdHRyKCduZy1yZXBlYXQtZW5kJywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGF0dHJzLiRzZXQoJ25nUmVwZWF0JywgcmVwZWF0RXhwcmVzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyB0aGUgZGlyLXBhZ2luYXRlLW5vLWNvbXBpbGUgZGlyZWN0aXZlIHRvIGVhY2ggZWxlbWVudCBpbiB0aGUgdEVsZW1lbnQgcmFuZ2UuXG4gICAgICAgICAqIEBwYXJhbSB0RWxlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gYWRkTm9Db21waWxlQXR0cmlidXRlcyh0RWxlbWVudCkge1xuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRFbGVtZW50LCBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgICAgIGlmIChlbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZWwpLmF0dHIoJ2Rpci1wYWdpbmF0ZS1uby1jb21waWxlJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlcyB0aGUgdmFyaWF0aW9ucyBvbiBkaXItcGFnaW5hdGUgKGRhdGEtLCAtc3RhcnQsIC1lbmQpIGFuZCB0aGUgZGlyLXBhZ2luYXRlLW5vLWNvbXBpbGUgZGlyZWN0aXZlcy5cbiAgICAgICAgICogQHBhcmFtIGVsZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZVRlbXBvcmFyeUF0dHJpYnV0ZXMoZWxlbWVudCkge1xuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChlbCkucmVtb3ZlQXR0cignZGlyLXBhZ2luYXRlLW5vLWNvbXBpbGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsZW1lbnQuZXEoMCkucmVtb3ZlQXR0cignZGlyLXBhZ2luYXRlLXN0YXJ0JykucmVtb3ZlQXR0cignZGlyLXBhZ2luYXRlJykucmVtb3ZlQXR0cignZGF0YS1kaXItcGFnaW5hdGUtc3RhcnQnKS5yZW1vdmVBdHRyKCdkYXRhLWRpci1wYWdpbmF0ZScpO1xuICAgICAgICAgICAgZWxlbWVudC5lcShlbGVtZW50Lmxlbmd0aCAtIDEpLnJlbW92ZUF0dHIoJ2Rpci1wYWdpbmF0ZS1lbmQnKS5yZW1vdmVBdHRyKCdkYXRhLWRpci1wYWdpbmF0ZS1lbmQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgZ2V0dGVyIGZ1bmN0aW9uIGZvciB0aGUgY3VycmVudC1wYWdlIGF0dHJpYnV0ZSwgdXNpbmcgdGhlIGV4cHJlc3Npb24gcHJvdmlkZWQgb3IgYSBkZWZhdWx0IHZhbHVlIGlmXG4gICAgICAgICAqIG5vIGN1cnJlbnQtcGFnZSBleHByZXNzaW9uIHdhcyBzcGVjaWZpZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBzY29wZVxuICAgICAgICAgKiBAcGFyYW0gYXR0cnNcbiAgICAgICAgICogQHBhcmFtIHBhZ2luYXRpb25JZFxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIG1ha2VDdXJyZW50UGFnZUdldHRlckZuKHNjb3BlLCBhdHRycywgcGFnaW5hdGlvbklkKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFBhZ2VHZXR0ZXI7XG4gICAgICAgICAgICBpZiAoYXR0cnMuY3VycmVudFBhZ2UpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZUdldHRlciA9ICRwYXJzZShhdHRycy5jdXJyZW50UGFnZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBjdXJyZW50LXBhZ2UgYXR0cmlidXRlIHdhcyBub3Qgc2V0LCB3ZSdsbCBtYWtlIG91ciBvd24uXG4gICAgICAgICAgICAgICAgLy8gUmVwbGFjZSBhbnkgbm9uLWFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIHdoaWNoIG1pZ2h0IGNvbmZ1c2VcbiAgICAgICAgICAgICAgICAvLyB0aGUgJHBhcnNlIHNlcnZpY2UgYW5kIGdpdmUgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAgICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljaGFlbGJyb21sZXkvYW5ndWxhclV0aWxzL2lzc3Vlcy8yMzNcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdEN1cnJlbnRQYWdlID0gKHBhZ2luYXRpb25JZCArICdfX2N1cnJlbnRQYWdlJykucmVwbGFjZSgvXFxXL2csICdfJyk7XG4gICAgICAgICAgICAgICAgc2NvcGVbZGVmYXVsdEN1cnJlbnRQYWdlXSA9IDE7XG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2VHZXR0ZXIgPSAkcGFyc2UoZGVmYXVsdEN1cnJlbnRQYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50UGFnZUdldHRlcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgYSBoZWxwZXIgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIGNvcnJlY3QgY29tcGlsYXRpb24gd2hlbiBpbiBtdWx0aS1lbGVtZW50IG1vZGUgKGllIGRpci1wYWdpbmF0ZS1zdGFydCwgZGlyLXBhZ2luYXRlLWVuZCkuXG4gICAgICogSXQgaXMgZHluYW1pY2FsbHkgYWRkZWQgdG8gYWxsIGVsZW1lbnRzIGluIHRoZSBkaXItcGFnaW5hdGUgY29tcGlsZSBmdW5jdGlvbiwgYW5kIGl0IHByZXZlbnRzIGZ1cnRoZXIgY29tcGlsYXRpb24gb2ZcbiAgICAgKiBhbnkgaW5uZXIgZGlyZWN0aXZlcy4gSXQgaXMgdGhlbiByZW1vdmVkIGluIHRoZSBsaW5rIGZ1bmN0aW9uLCBhbmQgYWxsIGlubmVyIGRpcmVjdGl2ZXMgYXJlIHRoZW4gbWFudWFsbHkgY29tcGlsZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9Db21waWxlRGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJpb3JpdHk6IDUwMDAsXG4gICAgICAgICAgICB0ZXJtaW5hbDogdHJ1ZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpclBhZ2luYXRpb25Db250cm9sc1RlbXBsYXRlSW5zdGFsbGVyKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCgnYW5ndWxhclV0aWxzLmRpcmVjdGl2ZXMuZGlyUGFnaW5hdGlvbi50ZW1wbGF0ZScsICc8dWwgY2xhc3M9XCJwYWdpbmF0aW9uXCIgbmctaWY9XCIxIDwgcGFnZXMubGVuZ3RoIHx8ICFhdXRvSGlkZVwiPjxsaSBuZy1pZj1cImJvdW5kYXJ5TGlua3NcIiBuZy1jbGFzcz1cInsgZGlzYWJsZWQgOiBwYWdpbmF0aW9uLmN1cnJlbnQgPT0gMSB9XCI+PGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwic2V0Q3VycmVudCgxKVwiPiZsYXF1bzs8L2E+PC9saT48bGkgbmctaWY9XCJkaXJlY3Rpb25MaW5rc1wiIG5nLWNsYXNzPVwieyBkaXNhYmxlZCA6IHBhZ2luYXRpb24uY3VycmVudCA9PSAxIH1cIj48YSBocmVmPVwiXCIgbmctY2xpY2s9XCJzZXRDdXJyZW50KHBhZ2luYXRpb24uY3VycmVudCAtIDEpXCI+JmxzYXF1bzs8L2E+PC9saT48bGkgbmctcmVwZWF0PVwicGFnZU51bWJlciBpbiBwYWdlcyB0cmFjayBieSB0cmFja2VyKHBhZ2VOdW1iZXIsICRpbmRleClcIiBuZy1jbGFzcz1cInsgYWN0aXZlIDogcGFnaW5hdGlvbi5jdXJyZW50ID09IHBhZ2VOdW1iZXIsIGRpc2FibGVkIDogcGFnZU51bWJlciA9PSBcXCcuLi5cXCcgfHwgKCAhIGF1dG9IaWRlICYmIHBhZ2VzLmxlbmd0aCA9PT0gMSApIH1cIj48YSBocmVmPVwiXCIgbmctY2xpY2s9XCJzZXRDdXJyZW50KHBhZ2VOdW1iZXIpXCI+e3sgcGFnZU51bWJlciB9fTwvYT48L2xpPjxsaSBuZy1pZj1cImRpcmVjdGlvbkxpbmtzXCIgbmctY2xhc3M9XCJ7IGRpc2FibGVkIDogcGFnaW5hdGlvbi5jdXJyZW50ID09IHBhZ2luYXRpb24ubGFzdCB9XCI+PGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwic2V0Q3VycmVudChwYWdpbmF0aW9uLmN1cnJlbnQgKyAxKVwiPiZyc2FxdW87PC9hPjwvbGk+PGxpIG5nLWlmPVwiYm91bmRhcnlMaW5rc1wiICBuZy1jbGFzcz1cInsgZGlzYWJsZWQgOiBwYWdpbmF0aW9uLmN1cnJlbnQgPT0gcGFnaW5hdGlvbi5sYXN0IH1cIj48YSBocmVmPVwiXCIgbmctY2xpY2s9XCJzZXRDdXJyZW50KHBhZ2luYXRpb24ubGFzdClcIj4mcmFxdW87PC9hPjwvbGk+PC91bD4nKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXJQYWdpbmF0aW9uQ29udHJvbHNEaXJlY3RpdmUocGFnaW5hdGlvblNlcnZpY2UsIHBhZ2luYXRpb25UZW1wbGF0ZSkge1xuXG4gICAgICAgIHZhciBudW1iZXJSZWdleCA9IC9eXFxkKyQvO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0FFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtLCBhdHRycykge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCBwYWdpbmF0aW9uVGVtcGxhdGUuZ2V0UGF0aCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgbWF4U2l6ZTogJz0/JyxcbiAgICAgICAgICAgICAgICBvblBhZ2VDaGFuZ2U6ICcmPycsXG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvbklkOiAnPT8nLFxuICAgICAgICAgICAgICAgIGF1dG9IaWRlOiAnPT8nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluazogZGlyUGFnaW5hdGlvbkNvbnRyb2xzTGlua0ZuXG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gZGlyUGFnaW5hdGlvbkNvbnRyb2xzTGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuXG4gICAgICAgICAgICAvLyByYXdJZCBpcyB0aGUgdW4taW50ZXJwb2xhdGVkIHZhbHVlIG9mIHRoZSBwYWdpbmF0aW9uLWlkIGF0dHJpYnV0ZS4gVGhpcyBpcyBvbmx5IGltcG9ydGFudCB3aGVuIHRoZSBjb3JyZXNwb25kaW5nIGRpci1wYWdpbmF0ZSBkaXJlY3RpdmUgaGFzXG4gICAgICAgICAgICAvLyBub3QgeWV0IGJlZW4gbGlua2VkIChlLmcuIGlmIGl0IGlzIGluc2lkZSBhbiBuZy1pZiBibG9jayksIGFuZCBpbiB0aGF0IGNhc2UgaXQgcHJldmVudHMgdGhpcyBjb250cm9scyBkaXJlY3RpdmUgZnJvbSBhc3N1bWluZyB0aGF0IHRoZXJlIGlzXG4gICAgICAgICAgICAvLyBubyBjb3JyZXNwb25kaW5nIGRpci1wYWdpbmF0ZSBkaXJlY3RpdmUgYW5kIHdyb25nbHkgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLlxuICAgICAgICAgICAgdmFyIHJhd0lkID0gYXR0cnMucGFnaW5hdGlvbklkIHx8ICBERUZBVUxUX0lEO1xuICAgICAgICAgICAgdmFyIHBhZ2luYXRpb25JZCA9IHNjb3BlLnBhZ2luYXRpb25JZCB8fCBhdHRycy5wYWdpbmF0aW9uSWQgfHwgIERFRkFVTFRfSUQ7XG5cbiAgICAgICAgICAgIGlmICghcGFnaW5hdGlvblNlcnZpY2UuaXNSZWdpc3RlcmVkKHBhZ2luYXRpb25JZCkgJiYgIXBhZ2luYXRpb25TZXJ2aWNlLmlzUmVnaXN0ZXJlZChyYXdJZCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWRNZXNzYWdlID0gKHBhZ2luYXRpb25JZCAhPT0gREVGQVVMVF9JRCkgPyAnIChpZDogJyArIHBhZ2luYXRpb25JZCArICcpICcgOiAnICc7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYWdpbmF0aW9uIGRpcmVjdGl2ZTogdGhlIHBhZ2luYXRpb24gY29udHJvbHMnICsgaWRNZXNzYWdlICsgJ2Nhbm5vdCBiZSB1c2VkIHdpdGhvdXQgdGhlIGNvcnJlc3BvbmRpbmcgcGFnaW5hdGlvbiBkaXJlY3RpdmUsIHdoaWNoIHdhcyBub3QgZm91bmQgYXQgbGluayB0aW1lLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXNjb3BlLm1heFNpemUpIHsgc2NvcGUubWF4U2l6ZSA9IDk7IH1cbiAgICAgICAgICAgIHNjb3BlLmF1dG9IaWRlID0gc2NvcGUuYXV0b0hpZGUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBzY29wZS5hdXRvSGlkZTtcbiAgICAgICAgICAgIHNjb3BlLmRpcmVjdGlvbkxpbmtzID0gYW5ndWxhci5pc0RlZmluZWQoYXR0cnMuZGlyZWN0aW9uTGlua3MpID8gc2NvcGUuJHBhcmVudC4kZXZhbChhdHRycy5kaXJlY3Rpb25MaW5rcykgOiB0cnVlO1xuICAgICAgICAgICAgc2NvcGUuYm91bmRhcnlMaW5rcyA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLmJvdW5kYXJ5TGlua3MpID8gc2NvcGUuJHBhcmVudC4kZXZhbChhdHRycy5ib3VuZGFyeUxpbmtzKSA6IGZhbHNlO1xuXG4gICAgICAgICAgICB2YXIgcGFnaW5hdGlvblJhbmdlID0gTWF0aC5tYXgoc2NvcGUubWF4U2l6ZSwgNSk7XG4gICAgICAgICAgICBzY29wZS5wYWdlcyA9IFtdO1xuICAgICAgICAgICAgc2NvcGUucGFnaW5hdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBsYXN0OiAxLFxuICAgICAgICAgICAgICAgIGN1cnJlbnQ6IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzY29wZS5yYW5nZSA9IHtcbiAgICAgICAgICAgICAgICBsb3dlcjogMSxcbiAgICAgICAgICAgICAgICB1cHBlcjogMSxcbiAgICAgICAgICAgICAgICB0b3RhbDogMVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChwYWdpbmF0aW9uU2VydmljZS5pc1JlZ2lzdGVyZWQocGFnaW5hdGlvbklkKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHBhZ2luYXRpb25TZXJ2aWNlLmdldENvbGxlY3Rpb25MZW5ndGgocGFnaW5hdGlvbklkKSArIDEpICogcGFnaW5hdGlvblNlcnZpY2UuZ2V0SXRlbXNQZXJQYWdlKHBhZ2luYXRpb25JZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24obGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVQYWdpbmF0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFnaW5hdGlvblNlcnZpY2UuaXNSZWdpc3RlcmVkKHBhZ2luYXRpb25JZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChwYWdpbmF0aW9uU2VydmljZS5nZXRJdGVtc1BlclBhZ2UocGFnaW5hdGlvbklkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oY3VycmVudCwgcHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCAhPSBwcmV2aW91cyAmJiB0eXBlb2YgcHJldmlvdXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGdvVG9QYWdlKHNjb3BlLnBhZ2luYXRpb24uY3VycmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFnaW5hdGlvblNlcnZpY2UuaXNSZWdpc3RlcmVkKHBhZ2luYXRpb25JZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2luYXRpb25TZXJ2aWNlLmdldEN1cnJlbnRQYWdlKHBhZ2luYXRpb25JZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oY3VycmVudFBhZ2UsIHByZXZpb3VzUGFnZSkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZSAhPSBwcmV2aW91c1BhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZ29Ub1BhZ2UoY3VycmVudFBhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzY29wZS5zZXRDdXJyZW50ID0gZnVuY3Rpb24obnVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhZ2luYXRpb25TZXJ2aWNlLmlzUmVnaXN0ZXJlZChwYWdpbmF0aW9uSWQpICYmIGlzVmFsaWRQYWdlTnVtYmVyKG51bSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbnVtID0gcGFyc2VJbnQobnVtLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25TZXJ2aWNlLnNldEN1cnJlbnRQYWdlKHBhZ2luYXRpb25JZCwgbnVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEN1c3RvbSBcInRyYWNrIGJ5XCIgZnVuY3Rpb24gd2hpY2ggYWxsb3dzIGZvciBkdXBsaWNhdGUgXCIuLi5cIiBlbnRyaWVzIG9uIGxvbmcgbGlzdHMsXG4gICAgICAgICAgICAgKiB5ZXQgZml4ZXMgdGhlIHByb2JsZW0gb2Ygd3JvbmdseS1oaWdobGlnaHRlZCBsaW5rcyB3aGljaCBoYXBwZW5zIHdoZW4gdXNpbmdcbiAgICAgICAgICAgICAqIFwidHJhY2sgYnkgJGluZGV4XCIgLSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY2hhZWxicm9tbGV5L2FuZ3VsYXJVdGlscy9pc3N1ZXMvMTUzXG4gICAgICAgICAgICAgKiBAcGFyYW0gaWRcbiAgICAgICAgICAgICAqIEBwYXJhbSBpbmRleFxuICAgICAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2NvcGUudHJhY2tlciA9IGZ1bmN0aW9uKGlkLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpZCArICdfJyArIGluZGV4O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gZ29Ub1BhZ2UobnVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhZ2luYXRpb25TZXJ2aWNlLmlzUmVnaXN0ZXJlZChwYWdpbmF0aW9uSWQpICYmIGlzVmFsaWRQYWdlTnVtYmVyKG51bSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUucGFnZXMgPSBnZW5lcmF0ZVBhZ2VzQXJyYXkobnVtLCBwYWdpbmF0aW9uU2VydmljZS5nZXRDb2xsZWN0aW9uTGVuZ3RoKHBhZ2luYXRpb25JZCksIHBhZ2luYXRpb25TZXJ2aWNlLmdldEl0ZW1zUGVyUGFnZShwYWdpbmF0aW9uSWQpLCBwYWdpbmF0aW9uUmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5wYWdpbmF0aW9uLmN1cnJlbnQgPSBudW07XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlVmFsdWVzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgYSBjYWxsYmFjayBoYXMgYmVlbiBzZXQsIHRoZW4gY2FsbCBpdCB3aXRoIHRoZSBwYWdlIG51bWJlciBhcyBhbiBhcmd1bWVudFxuICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGUub25QYWdlQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5vblBhZ2VDaGFuZ2UoeyBuZXdQYWdlTnVtYmVyIDogbnVtIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZVBhZ2luYXRpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhZ2luYXRpb25TZXJ2aWNlLmlzUmVnaXN0ZXJlZChwYWdpbmF0aW9uSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWdlID0gcGFyc2VJbnQocGFnaW5hdGlvblNlcnZpY2UuZ2V0Q3VycmVudFBhZ2UocGFnaW5hdGlvbklkKSkgfHwgMTtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUucGFnZXMgPSBnZW5lcmF0ZVBhZ2VzQXJyYXkocGFnZSwgcGFnaW5hdGlvblNlcnZpY2UuZ2V0Q29sbGVjdGlvbkxlbmd0aChwYWdpbmF0aW9uSWQpLCBwYWdpbmF0aW9uU2VydmljZS5nZXRJdGVtc1BlclBhZ2UocGFnaW5hdGlvbklkKSwgcGFnaW5hdGlvblJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUucGFnaW5hdGlvbi5jdXJyZW50ID0gcGFnZTtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUucGFnaW5hdGlvbi5sYXN0ID0gc2NvcGUucGFnZXNbc2NvcGUucGFnZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5wYWdpbmF0aW9uLmxhc3QgPCBzY29wZS5wYWdpbmF0aW9uLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnNldEN1cnJlbnQoc2NvcGUucGFnaW5hdGlvbi5sYXN0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlVmFsdWVzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhpcyBmdW5jdGlvbiB1cGRhdGVzIHRoZSB2YWx1ZXMgKGxvd2VyLCB1cHBlciwgdG90YWwpIG9mIHRoZSBgc2NvcGUucmFuZ2VgIG9iamVjdCwgd2hpY2ggY2FuIGJlIHVzZWQgaW4gdGhlIHBhZ2luYXRpb25cbiAgICAgICAgICAgICAqIHRlbXBsYXRlIHRvIGRpc3BsYXkgdGhlIGN1cnJlbnQgcGFnZSByYW5nZSwgZS5nLiBcInNob3dpbmcgMjEgLSA0MCBvZiAxNDQgcmVzdWx0c1wiO1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVSYW5nZVZhbHVlcygpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFnaW5hdGlvblNlcnZpY2UuaXNSZWdpc3RlcmVkKHBhZ2luYXRpb25JZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQYWdlID0gcGFnaW5hdGlvblNlcnZpY2UuZ2V0Q3VycmVudFBhZ2UocGFnaW5hdGlvbklkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zUGVyUGFnZSA9IHBhZ2luYXRpb25TZXJ2aWNlLmdldEl0ZW1zUGVyUGFnZShwYWdpbmF0aW9uSWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxJdGVtcyA9IHBhZ2luYXRpb25TZXJ2aWNlLmdldENvbGxlY3Rpb25MZW5ndGgocGFnaW5hdGlvbklkKTtcblxuICAgICAgICAgICAgICAgICAgICBzY29wZS5yYW5nZS5sb3dlciA9IChjdXJyZW50UGFnZSAtIDEpICogaXRlbXNQZXJQYWdlICsgMTtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUucmFuZ2UudXBwZXIgPSBNYXRoLm1pbihjdXJyZW50UGFnZSAqIGl0ZW1zUGVyUGFnZSwgdG90YWxJdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLnJhbmdlLnRvdGFsID0gdG90YWxJdGVtcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc1ZhbGlkUGFnZU51bWJlcihudW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKG51bWJlclJlZ2V4LnRlc3QobnVtKSAmJiAoMCA8IG51bSAmJiBudW0gPD0gc2NvcGUucGFnaW5hdGlvbi5sYXN0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogR2VuZXJhdGUgYW4gYXJyYXkgb2YgcGFnZSBudW1iZXJzIChvciB0aGUgJy4uLicgc3RyaW5nKSB3aGljaCBpcyB1c2VkIGluIGFuIG5nLXJlcGVhdCB0byBnZW5lcmF0ZSB0aGVcbiAgICAgICAgICogbGlua3MgdXNlZCBpbiBwYWdpbmF0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBjdXJyZW50UGFnZVxuICAgICAgICAgKiBAcGFyYW0gcm93c1BlclBhZ2VcbiAgICAgICAgICogQHBhcmFtIHBhZ2luYXRpb25SYW5nZVxuICAgICAgICAgKiBAcGFyYW0gY29sbGVjdGlvbkxlbmd0aFxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZVBhZ2VzQXJyYXkoY3VycmVudFBhZ2UsIGNvbGxlY3Rpb25MZW5ndGgsIHJvd3NQZXJQYWdlLCBwYWdpbmF0aW9uUmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBwYWdlcyA9IFtdO1xuICAgICAgICAgICAgdmFyIHRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoY29sbGVjdGlvbkxlbmd0aCAvIHJvd3NQZXJQYWdlKTtcbiAgICAgICAgICAgIHZhciBoYWxmV2F5ID0gTWF0aC5jZWlsKHBhZ2luYXRpb25SYW5nZSAvIDIpO1xuICAgICAgICAgICAgdmFyIHBvc2l0aW9uO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFBhZ2UgPD0gaGFsZldheSkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gJ3N0YXJ0JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG90YWxQYWdlcyAtIGhhbGZXYXkgPCBjdXJyZW50UGFnZSkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gJ2VuZCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gJ21pZGRsZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBlbGxpcHNlc05lZWRlZCA9IHBhZ2luYXRpb25SYW5nZSA8IHRvdGFsUGFnZXM7XG4gICAgICAgICAgICB2YXIgaSA9IDE7XG4gICAgICAgICAgICB3aGlsZSAoaSA8PSB0b3RhbFBhZ2VzICYmIGkgPD0gcGFnaW5hdGlvblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhZ2VOdW1iZXIgPSBjYWxjdWxhdGVQYWdlTnVtYmVyKGksIGN1cnJlbnRQYWdlLCBwYWdpbmF0aW9uUmFuZ2UsIHRvdGFsUGFnZXMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG9wZW5pbmdFbGxpcHNlc05lZWRlZCA9IChpID09PSAyICYmIChwb3NpdGlvbiA9PT0gJ21pZGRsZScgfHwgcG9zaXRpb24gPT09ICdlbmQnKSk7XG4gICAgICAgICAgICAgICAgdmFyIGNsb3NpbmdFbGxpcHNlc05lZWRlZCA9IChpID09PSBwYWdpbmF0aW9uUmFuZ2UgLSAxICYmIChwb3NpdGlvbiA9PT0gJ21pZGRsZScgfHwgcG9zaXRpb24gPT09ICdzdGFydCcpKTtcbiAgICAgICAgICAgICAgICBpZiAoZWxsaXBzZXNOZWVkZWQgJiYgKG9wZW5pbmdFbGxpcHNlc05lZWRlZCB8fCBjbG9zaW5nRWxsaXBzZXNOZWVkZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2VzLnB1c2goJy4uLicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2VzLnB1c2gocGFnZU51bWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGkgKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFnZXM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogR2l2ZW4gdGhlIHBvc2l0aW9uIGluIHRoZSBzZXF1ZW5jZSBvZiBwYWdpbmF0aW9uIGxpbmtzIFtpXSwgZmlndXJlIG91dCB3aGF0IHBhZ2UgbnVtYmVyIGNvcnJlc3BvbmRzIHRvIHRoYXQgcG9zaXRpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBpXG4gICAgICAgICAqIEBwYXJhbSBjdXJyZW50UGFnZVxuICAgICAgICAgKiBAcGFyYW0gcGFnaW5hdGlvblJhbmdlXG4gICAgICAgICAqIEBwYXJhbSB0b3RhbFBhZ2VzXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gY2FsY3VsYXRlUGFnZU51bWJlcihpLCBjdXJyZW50UGFnZSwgcGFnaW5hdGlvblJhbmdlLCB0b3RhbFBhZ2VzKSB7XG4gICAgICAgICAgICB2YXIgaGFsZldheSA9IE1hdGguY2VpbChwYWdpbmF0aW9uUmFuZ2UvMik7XG4gICAgICAgICAgICBpZiAoaSA9PT0gcGFnaW5hdGlvblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvdGFsUGFnZXM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFnaW5hdGlvblJhbmdlIDwgdG90YWxQYWdlcykge1xuICAgICAgICAgICAgICAgIGlmICh0b3RhbFBhZ2VzIC0gaGFsZldheSA8IGN1cnJlbnRQYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b3RhbFBhZ2VzIC0gcGFnaW5hdGlvblJhbmdlICsgaTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhbGZXYXkgPCBjdXJyZW50UGFnZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFBhZ2UgLSBoYWxmV2F5ICsgaTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmaWx0ZXIgc2xpY2VzIHRoZSBjb2xsZWN0aW9uIGludG8gcGFnZXMgYmFzZWQgb24gdGhlIGN1cnJlbnQgcGFnZSBudW1iZXIgYW5kIG51bWJlciBvZiBpdGVtcyBwZXIgcGFnZS5cbiAgICAgKiBAcGFyYW0gcGFnaW5hdGlvblNlcnZpY2VcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlbXNQZXJQYWdlRmlsdGVyKHBhZ2luYXRpb25TZXJ2aWNlKSB7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZW1zUGVyUGFnZSwgcGFnaW5hdGlvbklkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIChwYWdpbmF0aW9uSWQpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHBhZ2luYXRpb25JZCA9IERFRkFVTFRfSUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXBhZ2luYXRpb25TZXJ2aWNlLmlzUmVnaXN0ZXJlZChwYWdpbmF0aW9uSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ3BhZ2luYXRpb24gZGlyZWN0aXZlOiB0aGUgaXRlbXNQZXJQYWdlIGlkIGFyZ3VtZW50IChpZDogJyArIHBhZ2luYXRpb25JZCArICcpIGRvZXMgbm90IG1hdGNoIGEgcmVnaXN0ZXJlZCBwYWdpbmF0aW9uLWlkLic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZW5kO1xuICAgICAgICAgICAgdmFyIHN0YXJ0O1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNPYmplY3QoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICBpdGVtc1BlclBhZ2UgPSBwYXJzZUludChpdGVtc1BlclBhZ2UpIHx8IDk5OTk5OTk5OTk7XG4gICAgICAgICAgICAgICAgaWYgKHBhZ2luYXRpb25TZXJ2aWNlLmlzQXN5bmNNb2RlKHBhZ2luYXRpb25JZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gKHBhZ2luYXRpb25TZXJ2aWNlLmdldEN1cnJlbnRQYWdlKHBhZ2luYXRpb25JZCkgLSAxKSAqIGl0ZW1zUGVyUGFnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW5kID0gc3RhcnQgKyBpdGVtc1BlclBhZ2U7XG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvblNlcnZpY2Uuc2V0SXRlbXNQZXJQYWdlKHBhZ2luYXRpb25JZCwgaXRlbXNQZXJQYWdlKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGFycmF5IGp1c3QgbmVlZHMgdG8gYmUgc2xpY2VkXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGluIHRoZSBjYXNlIG9mIGFuIG9iamVjdCwgd2UgbmVlZCB0byBnZXQgYW4gYXJyYXkgb2Yga2V5cywgc2xpY2UgdGhhdCwgdGhlbiBtYXAgYmFjayB0b1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICAgICAgICAgICAgICAgICAgICB2YXIgc2xpY2VkT2JqZWN0ID0ge307XG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChrZXlzKGNvbGxlY3Rpb24pLnNsaWNlKHN0YXJ0LCBlbmQpLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNlZE9iamVjdFtrZXldID0gY29sbGVjdGlvbltrZXldO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsaWNlZE9iamVjdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNoaW0gZm9yIHRoZSBPYmplY3Qua2V5cygpIG1ldGhvZCB3aGljaCBkb2VzIG5vdCBleGlzdCBpbiBJRSA8IDlcbiAgICAgKiBAcGFyYW0gb2JqXG4gICAgICogQHJldHVybnMge0FycmF5fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXMob2JqKSB7XG4gICAgICAgIGlmICghT2JqZWN0LmtleXMpIHtcbiAgICAgICAgICAgIHZhciBvYmpLZXlzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqS2V5cy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmpLZXlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIHNlcnZpY2UgYWxsb3dzIHRoZSB2YXJpb3VzIHBhcnRzIG9mIHRoZSBtb2R1bGUgdG8gY29tbXVuaWNhdGUgYW5kIHN0YXkgaW4gc3luYy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWdpbmF0aW9uU2VydmljZSgpIHtcblxuICAgICAgICB2YXIgaW5zdGFuY2VzID0ge307XG4gICAgICAgIHZhciBsYXN0UmVnaXN0ZXJlZEluc3RhbmNlO1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uKGluc3RhbmNlSWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2VzW2luc3RhbmNlSWRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlc1tpbnN0YW5jZUlkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNNb2RlOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbGFzdFJlZ2lzdGVyZWRJbnN0YW5jZSA9IGluc3RhbmNlSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5pc1JlZ2lzdGVyZWQgPSBmdW5jdGlvbihpbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICByZXR1cm4gKHR5cGVvZiBpbnN0YW5jZXNbaW5zdGFuY2VJZF0gIT09ICd1bmRlZmluZWQnKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdldExhc3RJbnN0YW5jZUlkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFzdFJlZ2lzdGVyZWRJbnN0YW5jZTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnNldEN1cnJlbnRQYWdlUGFyc2VyID0gZnVuY3Rpb24oaW5zdGFuY2VJZCwgdmFsLCBzY29wZSkge1xuICAgICAgICAgICAgaW5zdGFuY2VzW2luc3RhbmNlSWRdLmN1cnJlbnRQYWdlUGFyc2VyID0gdmFsO1xuICAgICAgICAgICAgaW5zdGFuY2VzW2luc3RhbmNlSWRdLmNvbnRleHQgPSBzY29wZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRDdXJyZW50UGFnZSA9IGZ1bmN0aW9uKGluc3RhbmNlSWQsIHZhbCkge1xuICAgICAgICAgICAgaW5zdGFuY2VzW2luc3RhbmNlSWRdLmN1cnJlbnRQYWdlUGFyc2VyLmFzc2lnbihpbnN0YW5jZXNbaW5zdGFuY2VJZF0uY29udGV4dCwgdmFsKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRDdXJyZW50UGFnZSA9IGZ1bmN0aW9uKGluc3RhbmNlSWQpIHtcbiAgICAgICAgICAgIHZhciBwYXJzZXIgPSBpbnN0YW5jZXNbaW5zdGFuY2VJZF0uY3VycmVudFBhZ2VQYXJzZXI7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VyID8gcGFyc2VyKGluc3RhbmNlc1tpbnN0YW5jZUlkXS5jb250ZXh0KSA6IDE7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zZXRJdGVtc1BlclBhZ2UgPSBmdW5jdGlvbihpbnN0YW5jZUlkLCB2YWwpIHtcbiAgICAgICAgICAgIGluc3RhbmNlc1tpbnN0YW5jZUlkXS5pdGVtc1BlclBhZ2UgPSB2YWw7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0SXRlbXNQZXJQYWdlID0gZnVuY3Rpb24oaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlc1tpbnN0YW5jZUlkXS5pdGVtc1BlclBhZ2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zZXRDb2xsZWN0aW9uTGVuZ3RoID0gZnVuY3Rpb24oaW5zdGFuY2VJZCwgdmFsKSB7XG4gICAgICAgICAgICBpbnN0YW5jZXNbaW5zdGFuY2VJZF0uY29sbGVjdGlvbkxlbmd0aCA9IHZhbDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRDb2xsZWN0aW9uTGVuZ3RoID0gZnVuY3Rpb24oaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlc1tpbnN0YW5jZUlkXS5jb2xsZWN0aW9uTGVuZ3RoO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc2V0QXN5bmNNb2RlVHJ1ZSA9IGZ1bmN0aW9uKGluc3RhbmNlSWQpIHtcbiAgICAgICAgICAgIGluc3RhbmNlc1tpbnN0YW5jZUlkXS5hc3luY01vZGUgPSB0cnVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaXNBc3luY01vZGUgPSBmdW5jdGlvbihpbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VzW2luc3RhbmNlSWRdLmFzeW5jTW9kZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIHByb3ZpZGVyIGFsbG93cyBnbG9iYWwgY29uZmlndXJhdGlvbiBvZiB0aGUgdGVtcGxhdGUgcGF0aCB1c2VkIGJ5IHRoZSBkaXItcGFnaW5hdGlvbi1jb250cm9scyBkaXJlY3RpdmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFnaW5hdGlvblRlbXBsYXRlUHJvdmlkZXIoKSB7XG5cbiAgICAgICAgdmFyIHRlbXBsYXRlUGF0aCA9ICdhbmd1bGFyVXRpbHMuZGlyZWN0aXZlcy5kaXJQYWdpbmF0aW9uLnRlbXBsYXRlJztcblxuICAgICAgICB0aGlzLnNldFBhdGggPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVBhdGggPSBwYXRoO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBnZXRQYXRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlUGF0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH1cbn0pKCk7XG4iLCIndXNlIHN0cmljdCc7XG4oZnVuY3Rpb24oKXtcbiAgICB2YXIgbG93ZXJjYXNlID0gZnVuY3Rpb24oc3RyaW5nKXtyZXR1cm4gKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnKSA/IHN0cmluZy50b0xvd2VyQ2FzZSgpIDogc3RyaW5nO307XG4gICAgZnVuY3Rpb24gdG9Cb29sZWFuKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHZhciB2ID0gbG93ZXJjYXNlKCcnICsgdmFsdWUpO1xuICAgICAgICB2YWx1ZSA9ICEodiA9PSAnZicgfHwgdiA9PSAnMCcgfHwgdiA9PSAnZmFsc2UnIHx8IHYgPT0gJ25vJyB8fCB2ID09ICduJyB8fCB2ID09ICdbXScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgdmFyIEFuZ3VsYXJQcmludCA9IGFuZ3VsYXIubW9kdWxlKCdBbmd1bGFyUHJpbnQnLFtdKTtcbiAgICBBbmd1bGFyUHJpbnQuZGlyZWN0aXZlKCdwcmludFNlY3Rpb24nLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRbMF0uY2xhc3NMaXN0LmFkZCgncHJpbnRTZWN0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIEFuZ3VsYXJQcmludC5kaXJlY3RpdmUoJ3ByaW50SGlkZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFswXS5jbGFzc0xpc3QuYWRkKCdwcmludEhpZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgQW5ndWxhclByaW50LmRpcmVjdGl2ZSgncHJpbnRSZW1vdmUnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRbMF0uY2xhc3NMaXN0LmFkZCgncHJpbnRSZW1vdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgQW5ndWxhclByaW50LmRpcmVjdGl2ZSgncHJpbnRPbmx5JywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgICAgICBsaW5rOiB7XG4gICAgICAgICAgICAgICAgICAgIHBvc3Q6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRbMF0uY2xhc3NMaXN0LmFkZCgncHJpbnRPbmx5Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICBBbmd1bGFyUHJpbnQuZGlyZWN0aXZlKCdwcmludEF2b2lkQnJlYWsnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRbMF0uY2xhc3NMaXN0LmFkZCgnYXZvaWRQYWdlQnJlYWsnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgQW5ndWxhclByaW50LmRpcmVjdGl2ZSgncHJpbnRCdG4nLFsnJHdpbmRvdycsIGZ1bmN0aW9uKCR3aW5kb3cpe1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KXtcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICR3aW5kb3cucHJpbnQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XSk7XG4gICAgQW5ndWxhclByaW50LmRpcmVjdGl2ZSgncHJpbnRJZicsIFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5wcmludElmLCBmdW5jdGlvbiBhcHBseVByaW50KHZhbHVlKXtcbiAgICAgICAgICAgIGlmKCdwcmludE9ubHknIGluIGF0dHIpe1xuICAgICAgICAgICAgICAgICRhbmltYXRlW3RvQm9vbGVhbih2YWx1ZSkgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oZWxlbWVudCwgJ3ByaW50UmVtb3ZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICRhbmltYXRlW3RvQm9vbGVhbih2YWx1ZSkgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oZWxlbWVudCwgJ3ByaW50U2VjdGlvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1dKTtcbiAgICBBbmd1bGFyUHJpbnQuZGlyZWN0aXZlKCdwcmludExhbmRzY2FwZScsZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciBzaGVldCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZS5zaGVldDtcbiAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICAgIHNoZWV0Lmluc2VydFJ1bGUoJ0BwYWdle3NpemU6bGFuZHNjYXBlO30nLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBBbmd1bGFyUHJpbnQuZGlyZWN0aXZlKCdwcmludFRhYmxlJywgZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5wcmludFRhYmxlLCBmdW5jdGlvbiBtYWtlVGFibGUodmFsdWUpe1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IGVsZW1lbnRbMF07XG4gICAgICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZCgncHJpbnRTZWN0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW0uaWQgPSAncHJpbnQtdGFibGUnO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGRzID0gZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGQnKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCwgY29udGVudCwgZGl2OyBpIDwgdGRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSB0ZHNbaV0uaW5uZXJIVE1MO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGRzW2ldLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ2F2b2lkUGFnZUJyZWFrJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBjb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGRzW2ldLmFwcGVuZENoaWxkKGRpdik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudFswXSA9IGVsZW07XG4gICAgICAgICAgICAgICAgfSwxMDAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH0pO1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
